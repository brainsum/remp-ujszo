{"version":3,"sources":["actions/types.js","reducers/SegmentsReducer.js","reducers/TriggersReducer.js","reducers/CanvasReducer.js","reducers/ScenarioReducer.js","reducers/MailsReducer.js","reducers/GoalsReducer.js","reducers/BannersReducer.js","reducers/index.js","services/SegmenterService.js","config.js","components/widgets/TrayItemWidget.js","services/ExportService.js","components/Notification.js","components/elements/SimplePortFactory.js","components/elements/Link/LinkModel.js","components/elements/Link/LinkFactory.js","components/elements/Ports/LeftRightPort.js","components/elements/Ports/LeftRightBottomPort.js","components/elements/Email/PortModel.js","components/elements/Email/NodeModel.js","components/widgets/PortWidget.js","actions/CanvasActions.js","actions/ScenarioActions.js","actions/SegmentsActions.js","actions/TriggersActions.js","actions/MailsActions.js","actions/GoalsActions.js","actions/BannersActions.js","components/StatisticTooltip.js","components/MaterialSelect.js","components/elements/Email/NodeWidget.js","components/elements/Email/NodeFactory.js","components/elements/Banner/PortModel.js","components/elements/Banner/NodeModel.js","components/elements/Banner/NodeWidget.js","components/elements/Banner/NodeFactory.js","components/elements/Segment/PortModel.js","components/elements/Segment/NodeModel.js","components/elements/Segment/NodeWidget.js","components/elements/Segment/NodeFactory.js","components/elements/Trigger/PortModel.js","components/elements/Trigger/NodeModel.js","components/elements/Trigger/NodeWidget.js","components/elements/Trigger/NodeFactory.js","components/elements/Wait/PortModel.js","components/elements/Wait/NodeModel.js","components/elements/Wait/NodeWidget.js","components/elements/Wait/NodeFactory.js","components/elements/Goal/PortModel.js","components/elements/Goal/NodeModel.js","components/elements/Goal/NodeWidget.js","components/elements/Goal/NodeFactory.js","components/widgets/BodyWidget.js","services/RenderService.js","components/Application.js","App.js","index.js"],"names":["SEGMENTS_CHANGED","TRIGGERS_CHANGED","MAILS_CHANGED","GOALS_CHANGED","BANNERS_CHANGED","CANVAS_ZOOMABLE","CANVAS_PANNABLE","CANVAS_ZOOMABLE_PANNABLE","CANVAS_NOTIFICATION","SET_SCENARIO_ID","SET_SCENARIO_NAME","SET_SCENARIO_PAYLOAD","SET_SCENARIO_LOADING","INITIAL_STATE","avalaibleSegments","avalaibleTriggers","pannable","zoomable","notification","open","variant","text","id","name","loading","payload","availableMails","availableGoals","availableBanners","combineReducers","segments","state","arguments","length","undefined","action","type","Object","objectSpread","triggers","canvas","scenario","mails","goals","banners","SegmenterService","vueScript","document","createElement","src","segmenterScript","segmenterStyles","rel","href","head","appendChild","selector","window","Vue","render","h","RempSegmenter","$mount","Scenario","config","AUTH_TOKEN","API_HOST","SCENARIO_ID","BANNER_ENABLED","URL_SCENARIO_DETAIL","concat","URL_SCENARIO_CREATE","URL_SEGMENTS_INDEX","URL_TRIGGERS_INDEX","URL_MAILS_INDEX","URL_GOALS_INDEX","URL_BANNERS_INDEX","URL_TOOLTIPS","TrayItemWidget","_React$Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","_this2","react","ListItem_default","a","draggable","onDragStart","event","dataTransfer","setData","JSON","stringify","model","className","ListItemIcon_default","icon","ListItemText_default","primary","React","unitTimeToMinutes","time","unit","ExportService","formatDescendant","node","parentNode","descendant","uuid","direction","portName","serializedModel","serializeDiagram","elements","visual","nodes","filter","map","formatNode","entries","getNodes","forEach","x","y","serialize","ports","find","port","links","link","nextNode","targetPort","parent","sourcePort","_this3","email","code","selectedMail","descendants","getAllChildrenNodes","descendantNode","console","log","expiresInTime","expiresInUnit","banner","selectedBanner","expiresInMinutes","descendantsPositive","descendantsNegative","segment","selectedSegment","toConsumableArray","selectedTrigger","wait","minutes","waitingTime","waitingUnit","goalProperties","codes","selectedGoals","recheckPeriodMinutes","recheckPeriodTime","recheckPeriodUnit","timeoutTime","timeoutUnit","timeoutMinutes","goal","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","Notification","Icon","react_default","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","handleClose","SnackbarContent_default","message","Component","SimplePortFactory","_AbstractPortFactory","cb","initialConfig","AbstractPortFactory","LinkModel","_DefaultLinkModel","width","curvyness","color","DefaultLinkModel","LinkFactory","_DefaultLinkFactory","widget","selected","path","bem","strokeWidth","stroke","d","DefaultLinkFactory","LeftRightPort","_BasePortModel","pos","position","in","createLinkModel","setSourcePort","setTargetPort","_","get","prototype","data","engine","BasePortModel","LeftRightBottomPort","PortModel","_LeftRightPort","NodeModel","_BaseNodeModel","element","addPort","ob","BaseNodeModel","PortWidget","_BasePortWidget","assign","getProps","onMouseEnter","setState","onMouseLeave","data-name","data-nodeid","getID","children","BasePortWidget","setCanvasZoomingAndPanning","zoomingAndPanning","setCanvasNotification","notificationOptions","setScenarioId","setScenarioName","setScenarioLoading","fetchScenario","scenarioId","dispatch","axios","then","response","catch","fetchSegments","fetchTriggers","events","fetchMails","mail_templates","fetchGoals","fetchBanners","StatisticsTooltip","html","oldProps","scenarioID","fetchStatistics","_this$props","_ref","anchorElement","Popover_default","Boolean","anchorEl","style","pointerEvents","transformOrigin","CircularProgress_default","size","dangerouslySetInnerHTML","__html","connect","inputComponent","inputRef","objectWithoutProperties","ref","components","Control","TextField_default","fullWidth","InputProps","inputProps","selectProps","classes","input","innerRef","innerProps","textFieldProps","Menu","Paper_default","square","paper","MultiValue","Chip_default","tabIndex","label","classNames","chip","defineProperty","chipFocused","isFocused","onDelete","removeProps","onClick","deleteIcon","Cancel_default","NoOptionsMessage","Typography_default","noOptionsMessage","Option","MenuItem_default","buttonRef","component","fontWeight","isSelected","Placeholder","placeholder","SingleValue","singleValue","ValueContainer","valueContainer","MaterialSelect","single","multi","handleChange","theme","selectStyles","base","palette","& input","font","root","react_select_esm","styles","menuPosition","InputLabelProps","shrink","isMulti","options","onChange","defaultProp","withStyles","flexGrow","marginTop","marginBottom","fontFamily","display","padding","flexWrap","flex","alignItems","overflow","margin","spacing","backgroundColor","emphasize","grey","fontSize","left","zIndex","right","divider","height","withTheme","NodeWidget","openDialog","dialogOpened","nodeFormName","anchorElementForTooltip","closeDialog","handleNodeMouseEnter","currentTarget","handleNodeMouseLeave","getFormatedValue","match","mail","transformOptionsForSelect","lodashGrouped","groupBy","mail_type","properlyGrouped","keys","push","sorting","sort","b","getSelectedMailValue","classBaseName","getClassName","background","onDoubleClick","Mail_default","PortWidget_PortWidget","StatisticTooltip","Dialog_default","aria-labelledby","onKeyUp","keyCode","preventDefault","stopPropagation","DialogTitle_default","DialogContent_default","DialogContentText_default","Grid_default","container","item","xs","target","components_MaterialSelect","DialogActions_default","Button_default","diagramEngine","repaintCanvas","NodeFactory","_AbstractNodeFactory","Email_NodeWidget","AbstractNodeFactory","Adjust_default","helperText","FormControl_default","InputLabel_default","htmlFor","Select_default","Banner_NodeWidget","_LeftRightBottomPort","group","getSelectedSegmentValue","handleNewSegmentClick","addEventListener","handleSavedNewSegment","handleCancelNewSegment","creatingNewSegment","setTimeout","init","detail","removeEventListener","SubdirectoryArrowRight_default","Check_default","top","Close_default","fullScreen","disableEscapeKeyDown","bottom","Icon_default","marginRight","Segment_NodeWidget","getTriggersInSelectableFormat","trigger","getSelectedTriggerValue","Notifications_default","option","Trigger_NodeWidget","nodeFormWaitingTime","timeUnit","AccessAlarmsOutlined_default","Wait_NodeWidget","matches","goalCode","CheckBox_default","AccessTime_default","Goal_NodeWidget","BodyWidget","saveChanges","app","isCorruptedPayload","exportService","getDiagramEngine","getDiagramModel","exportPayload","post","startEditingName","editedName","editingName","cancelEditingName","submitEditingName","handleCloseAndSaveDuringChangingName","handleNameTyping","closeNotification","prevProps","diagramProps","maxNumberPointsPerLink","allowLooseLinks","allowCanvasTranslation","allowCanvasZoom","CssBaseline_default","AppBar_default","appBar","Toolbar_default","noWrap","autoFocus","onKeyDown","onBlur","justify","Drawer_default","drawer","drawerPaper","toolbar","List_default","subheader","ListSubheader_default","TrayItemWidget_TrayItemWidget","components_Notification","content","onDrop","stormDiagramNode","getData","parse","Email","Banner","Segment","Trigger","Wait","Goal","points","getRelativeMousePoint","addNode","forceUpdate","onDragOver","main","compose","flexShrink","mixins","minutesToTimeUnit","RenderService","activeModel","flatMap","triggerVisual","renderElements","elementId","nextNodes","getPort","addLink","descendantObj","Error","hasOwnProperty","recheckPeriodTimeUnit","setPosition","Application","DiagramEngine","installDefaultFactories","DiagramModel","renderService","corruptedPayload","renderPayload","registerCustomModels","ex","setDiagramModel","registerLinkFactory","registerPortFactory","registerNodeFactory","App","load","scenarioPayload","widgets_BodyWidget","__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__","defaults","headers","common","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.7ddbb3d7.chunk.js","sourcesContent":["export const SEGMENTS_CHANGED = 'segments_changed';\n\nexport const TRIGGERS_CHANGED = 'triggers_changed';\n\nexport const MAILS_CHANGED = 'mails_changed';\nexport const GOALS_CHANGED = 'goals_changed';\nexport const BANNERS_CHANGED = 'banners_changed';\n\nexport const CANVAS_ZOOMABLE = 'canvas_zoomable';\nexport const CANVAS_PANNABLE = 'canvas_pannable';\nexport const CANVAS_ZOOMABLE_PANNABLE = 'canvas_zoomable_pannable';\nexport const CANVAS_NOTIFICATION = 'canvas_notification';\n\nexport const SET_SCENARIO_ID = 'set_scenario_id';\nexport const SET_SCENARIO_NAME = 'set_scenario_name';\nexport const SET_SCENARIO_PAYLOAD = 'set_scenario_payload';\nexport const SET_SCENARIO_LOADING = 'set_scenario_loading';\n","\nimport {\n    SEGMENTS_CHANGED\n} from './../actions/types';\n  \nconst INITIAL_STATE = {\n    avalaibleSegments: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case SEGMENTS_CHANGED:\n            return { ...state, avalaibleSegments: action.payload };\n\n        default:\n            return state;\n    }\n};","import { TRIGGERS_CHANGED } from './../actions/types';\n\nconst INITIAL_STATE = {\n  avalaibleTriggers: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case TRIGGERS_CHANGED:\n      return { ...state, avalaibleTriggers: action.payload };\n\n    default:\n      return state;\n  }\n};\n","import {\n  CANVAS_PANNABLE,\n  CANVAS_ZOOMABLE,\n  CANVAS_ZOOMABLE_PANNABLE,\n  CANVAS_NOTIFICATION\n} from './../actions/types';\n\nconst INITIAL_STATE = {\n  pannable: true,\n  zoomable: true,\n  notification: {\n    open: false,\n    variant: 'success',\n    text: ''\n  }\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CANVAS_PANNABLE:\n      return { ...state, pannable: action.payload };\n\n    case CANVAS_ZOOMABLE:\n      return { ...state, zoomable: action.payload };\n\n    case CANVAS_ZOOMABLE_PANNABLE:\n      return { ...state, zoomable: action.payload, pannable: action.payload };\n\n    case CANVAS_NOTIFICATION:\n      return {\n        ...state,\n        notification: { ...state.notification, ...action.payload }\n      };\n\n    default:\n      return state;\n  }\n};\n","import {\n  SET_SCENARIO_ID,\n  SET_SCENARIO_NAME,\n  SET_SCENARIO_LOADING,\n  SET_SCENARIO_PAYLOAD\n} from './../actions/types';\n\nconst INITIAL_STATE = {\n  id: null,\n  name: '',\n  loading: 0,\n  payload: null\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SET_SCENARIO_ID:\n      return { ...state, id: action.payload };\n\n    case SET_SCENARIO_NAME:\n      return { ...state, name: action.payload };\n\n    case SET_SCENARIO_LOADING:\n      let loading = state.loading;\n      if (action.payload) {\n        ++loading;\n      } else {\n        --loading;\n      }\n      return { ...state, loading };\n\n    case SET_SCENARIO_PAYLOAD:\n      return { ...state, payload: action.payload };\n\n    default:\n      return state;\n  }\n};\n","import { MAILS_CHANGED } from './../actions/types';\n\nconst INITIAL_STATE = {\n  availableMails: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case MAILS_CHANGED:\n      return { ...state, availableMails: action.payload };\n\n    default:\n      return state;\n  }\n};\n","import { GOALS_CHANGED } from './../actions/types';\n\nconst INITIAL_STATE = {\n  availableGoals: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case GOALS_CHANGED:\n      return { ...state, availableGoals: action.payload };\n\n    default:\n      return state;\n  }\n};\n","import { BANNERS_CHANGED } from '../actions/types';\n\nconst INITIAL_STATE = {\n  availableBanners: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case BANNERS_CHANGED:\n      return { ...state, availableBanners: action.payload };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport SegmentsReducer from './SegmentsReducer';\nimport TriggersReducer from './TriggersReducer';\nimport CanvasReducer from './CanvasReducer';\nimport ScenarioReducer from './ScenarioReducer';\nimport MailsReducer from './MailsReducer';\nimport GoalsReducer from './GoalsReducer';\nimport BannersReducer from './BannersReducer';\n\nexport default combineReducers({\n  segments: SegmentsReducer,\n  triggers: TriggersReducer,\n  canvas: CanvasReducer,\n  scenario: ScenarioReducer,\n  mails: MailsReducer,\n  goals: GoalsReducer,\n  banners: BannersReducer,\n});\n","export default class SegmenterService {\n  static load() {\n    // maybe add async defer if needed\n    const vueScript = document.createElement('script');\n    vueScript.type = 'text/javascript';\n    vueScript.src = '/segmenter/vue.min.js';\n\n    const segmenterScript = document.createElement('script');\n    segmenterScript.type = 'text/javascript';\n    segmenterScript.src = '/segmenter/RempSegmenter.umd.min.js';\n\n    var segmenterStyles = document.createElement('link');\n    segmenterStyles.rel = 'stylesheet';\n    segmenterStyles.href = '/segmenter/RempSegmenter.css';\n\n    document.head.appendChild(vueScript);\n    document.head.appendChild(segmenterScript);\n    document.head.appendChild(segmenterStyles);\n  }\n\n  static init(selector = '#segmenter') {\n    new window.Vue({\n      render: h => h(window.RempSegmenter)\n    }).$mount(selector);\n  }\n}\n","// window.Scenario = {\n//   config: {\n//     AUTH_TOKEN: '',\n//     API_HOST: 'https://predplatne.dennikn.sk/api/v1',\n//     SCENARIO_ID: null\n//     BANNER_ENABLED: null\n//   }\n// };\n\n// window.Segments = {\n//   config: {\n//     AUTH_TOKEN: '',\n//     API_HOST: 'https://predplatne.dennikn.sk',\n//     CANCEL_PATH: '#',\n//     SEGMENT_ID: null\n//   }\n// };\n\nexport const { AUTH_TOKEN, API_HOST, SCENARIO_ID, BANNER_ENABLED } = window.Scenario.config;\n\nexport const URL_SCENARIO_DETAIL = `${API_HOST}/scenarios/info?id=`;\nexport const URL_SCENARIO_CREATE = `${API_HOST}/scenarios/create`;\nexport const URL_SEGMENTS_INDEX = `${API_HOST}/user-segments/list`;\nexport const URL_TRIGGERS_INDEX = `${API_HOST}/events/list`;\nexport const URL_MAILS_INDEX = `${API_HOST}/mail-template/list`;\nexport const URL_GOALS_INDEX = `${API_HOST}/onboarding-goals/list`;\nexport const URL_BANNERS_INDEX = `${API_HOST}/remp/list-banners`;\nexport const URL_TOOLTIPS = `${API_HOST}/scenarios/element`;\n","import * as React from 'react';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nexport class TrayItemWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <ListItem\n        // button\n        key={this.props.name}\n        draggable={true}\n        onDragStart={event => {\n          event.dataTransfer.setData(\n            'storm-diagram-node',\n            JSON.stringify(this.props.model)\n          );\n        }}\n        className='tray-item'\n      >\n        <ListItemIcon>{this.props.icon}</ListItemIcon>\n        <ListItemText primary={this.props.name} />\n      </ListItem>\n    );\n  }\n}\n","function unitTimeToMinutes(time, unit) {\n  switch (unit) {\n    case 'minutes':\n      return time;\n    case 'hours':\n      return time * 60;\n    case 'days':\n      return time * 60 * 24;\n    default:\n      return time;\n  }\n}\n\nexport class ExportService {\n  constructor(model) {\n    this.model = model;\n  }\n\n  exportPayload() {\n    const payload = {};\n    const serializedModel = this.model.serializeDiagram();\n\n    payload.triggers = {};\n    payload.elements = {};\n    payload.visual = {};\n\n    serializedModel.nodes\n      .filter(node => node.type === 'trigger')\n      .map(node => (payload.triggers[node.id] = this.formatNode(node)));\n\n    Object.entries(this.model.getNodes()).forEach(node => {\n      payload.visual[node[0]] = {\n        x: node[1].x,\n        y: node[1].y\n      };\n    });\n\n    Object.entries(this.model.getNodes()).forEach(node => {\n      if (node[1].type !== 'trigger') {\n        payload.elements[node[0]] = this.formatNode(node[1].serialize());\n      }\n    });\n\n    return payload;\n  }\n\n  getAllChildrenNodes(node, portName = 'right') {\n    const port = node.ports.find(port => port.name === portName);\n\n    return port.links.map(link => {\n      let nextNode = null;\n\n      if (this.model.links[link].targetPort.parent.id !== node.id) {\n        nextNode = this.model.links[link].targetPort.parent;\n      } else {\n        nextNode = this.model.links[link].sourcePort.parent;\n      }\n\n      // return this.formatNode(nextNode.serialize(), model);\n      return { ...nextNode.serialize(), portName };\n    });\n  }\n\n  formatNode(node) {\n    if (node.type === 'email') {\n      return {\n        id: node.id,\n        name: node.name ? node.name : '',\n        type: 'email',\n        email: {\n          code: node.selectedMail,\n          descendants: this.getAllChildrenNodes(node).map(descendantNode =>\n            this.formatDescendant(descendantNode, node)\n          )\n        }\n      };\n    } else if (node.type === 'banner') {\n      console.log('sending banner');\n      console.log(node.expiresInTime, node.expiresInUnit);\n\n      return {\n        id: node.id,\n        name: node.name ? node.name : '',\n        type: 'banner',\n        banner: {\n          id: node.selectedBanner,\n          expiresInMinutes: unitTimeToMinutes(node.expiresInTime, node.expiresInUnit),\n          descendants: this.getAllChildrenNodes(node).map(descendantNode =>\n            this.formatDescendant(descendantNode, node)\n          )\n        }\n      };\n    } else if (node.type === 'segment') {\n      const descendantsPositive = this.getAllChildrenNodes(node, 'right').map(\n        descendantNode => this.formatDescendant(descendantNode, node)\n      );\n      const descendantsNegative = this.getAllChildrenNodes(node, 'bottom').map(\n        descendantNode => this.formatDescendant(descendantNode, node)\n      );\n      return {\n        id: node.id,\n        name: node.name ? node.name : '',\n        type: 'segment',\n        segment: {\n          code: node.selectedSegment ? node.selectedSegment : 'all_users',\n          descendants: [...descendantsPositive, ...descendantsNegative]\n        }\n      };\n    } else if (node.type === 'trigger') {\n      return {\n        id: node.id,\n        name: node.name ? node.name : '',\n        type: 'event',\n        event: {\n          code: node.selectedTrigger ? node.selectedTrigger : 'user_created'\n        },\n        // elements: this.getAllChildrenNodes(node).map((descendantNode) => this.formatDescendant(descendantNode, node))\n        elements: this.getAllChildrenNodes(node).map(\n          descendantNode => descendantNode.id\n        )\n      };\n    } else if (node.type === 'wait') {\n      return {\n        id: node.id,\n        name: node.name ? node.name : '',\n        type: 'wait',\n        wait: {\n          minutes: unitTimeToMinutes(node.waitingTime, node.waitingUnit),\n          descendants: this.getAllChildrenNodes(node).map(descendantNode =>\n            this.formatDescendant(descendantNode, node)\n          )\n        }\n      };\n    } else if (node.type === 'goal') {\n      const descendantsPositive = this.getAllChildrenNodes(node, 'right').map(\n        descendantNode => this.formatDescendant(descendantNode, node)\n      );\n      const descendantsNegative = this.getAllChildrenNodes(node, 'bottom').map(\n        descendantNode => this.formatDescendant(descendantNode, node)\n      );\n\n      let goalProperties = {\n        codes: node.selectedGoals ? node.selectedGoals : [],\n        descendants: [...descendantsPositive, ...descendantsNegative],\n        recheckPeriodMinutes: unitTimeToMinutes(node.recheckPeriodTime, node.recheckPeriodUnit)\n      };\n\n      if (node.timeoutTime && node.timeoutUnit) {\n        goalProperties.timeoutMinutes = unitTimeToMinutes(node.timeoutTime, node.timeoutUnit);\n      }\n\n      return {\n        id: node.id,\n        name: node.name ? node.name : '',\n        type: 'goal',\n        goal: goalProperties,\n      };\n    }\n  }\n\n  formatDescendant = (node, parentNode) => {\n    let descendant = {\n      uuid: node.id\n    };\n\n    if (parentNode.type === 'segment') {\n      descendant.direction = node.portName === 'right' ? 'positive' : 'negative';\n    } else if (parentNode.type === 'goal') {\n      descendant.direction = node.portName === 'right' ? 'positive' : 'negative';\n    }\n\n    return descendant;\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nclass Notification extends React.Component {\n  render() {\n    const Icon = variantIcon[this.props.variant];\n\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right'\n        }}\n        open={this.props.open}\n        autoHideDuration={3000}\n        onClose={this.props.handleClose}\n      >\n        <SnackbarContent\n          className={'toast-' + this.props.variant}\n          message={\n            <span id='client-snackbar' className='toast__message'>\n              <Icon className='toast__icon toast__icon-variant' />\n              {this.props.text}\n            </span>\n          }\n        />\n      </Snackbar>\n    );\n  }\n}\n\nNotification.propTypes = {\n  variant: PropTypes.oneOf(['success', 'warning', 'info', 'error']).isRequired,\n  text: PropTypes.string.isRequired,\n  handleClose: PropTypes.func,\n  open: PropTypes.bool.isRequired\n};\n\nexport default Notification;\n","import { AbstractPortFactory } from 'storm-react-diagrams';\n\nexport class SimplePortFactory extends AbstractPortFactory {\n  cb;\n\n  constructor(type, cb) {\n    super(type);\n    this.cb = cb;\n  }\n\n  getNewInstance(initialConfig) {\n    return this.cb(initialConfig);\n  }\n}\n","import { DefaultLinkModel } from 'storm-react-diagrams';\n\nexport class LinkModel extends DefaultLinkModel {\n  constructor() {\n    super('custom');\n\n    this.width = 3;\n    this.curvyness = 50;\n    this.color = 'rgba(0,0,0,0.3)';\n  }\n}\n","import * as React from 'react';\nimport { DefaultLinkFactory } from 'storm-react-diagrams';\n\nimport { LinkModel } from './LinkModel';\n\nexport class LinkFactory extends DefaultLinkFactory {\n  constructor() {\n    super();\n    this.type = 'custom';\n  }\n\n  getNewInstance(initialConfig) {\n    return new LinkModel();\n  }\n\n  generateLinkSegment(model, widget, selected, path) {\n    return (\n      <path\n        className={selected ? widget.bem('--path-selected') : ''}\n        strokeWidth={model.width}\n        stroke={model.color}\n        d={path}\n      />\n    );\n  }\n}\n","import * as _ from 'lodash';\nimport { PortModel as BasePortModel } from 'storm-react-diagrams';\n\nimport { LinkModel } from './../Link';\n\nexport class LeftRightPort extends BasePortModel {\n  in;\n  position;\n\n  constructor(pos = 'left', type) {\n    super(pos, type);\n\n    this.position = pos;\n    this.in = this.position === 'left';\n  }\n\n  link(port) {\n    let link = this.createLinkModel();\n\n    link.setSourcePort(this);\n    link.setTargetPort(port);\n\n    return link;\n  }\n\n  canLinkToPort(port) {\n    return this.in !== port.in;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      position: this.position\n    });\n  }\n\n  deSerialize(data, engine) {\n    super.deSerialize(data, engine);\n    this.position = data.position;\n  }\n\n  createLinkModel() {\n    return new LinkModel();\n  }\n}\n","import * as _ from 'lodash';\nimport { PortModel as BasePortModel } from 'storm-react-diagrams';\n\nimport { LinkModel } from './../Link';\n\nexport class LeftRightBottomPort extends BasePortModel {\n  position;\n\n  constructor(pos = 'left', type) {\n    super(pos, type);\n\n    this.position = pos;\n    this.in = this.position === 'left';\n  }\n\n  link(port) {\n    let link = this.createLinkModel();\n\n    link.setSourcePort(this);\n    link.setTargetPort(port);\n\n    return link;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      position: this.position\n    });\n  }\n\n  canLinkToPort(port) {\n    return this.in !== port.in;\n  }\n\n  deSerialize(data, engine) {\n    super.deSerialize(data, engine);\n    this.position = data.position;\n  }\n\n  createLinkModel() {\n    return new LinkModel();\n  }\n}\n","import { LeftRightPort } from '../Ports';\n\nexport class PortModel extends LeftRightPort {\n  constructor(position = 'left') {\n    super(position, 'email');\n  }\n}\n","import { NodeModel as BaseNodeModel } from 'storm-react-diagrams';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\n\nexport class NodeModel extends BaseNodeModel {\n  constructor(element) {\n    super('email', element.id);\n\n    this.name = element.name;\n    this.selectedMail = element.selectedMail;\n    this.addPort(new PortModel('left'));\n    this.addPort(new PortModel('right'));\n  }\n\n  deSerialize(ob, engine) {\n    super.deSerialize(ob, engine);\n    this.name = ob.name;\n    this.selectedMail = ob.selectedMail;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      name: this.name,\n      selectedMail: this.selectedMail\n    });\n  }\n}\n","import * as React from 'react';\n\nimport { PortWidget as BasePortWidget } from 'storm-react-diagrams';\n\nexport class PortWidget extends BasePortWidget {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: false\n    };\n  }\n\n  getClassName() {\n    return (\n      'port ' +\n      super.getClassName() +\n      (this.state.selected ? this.bem('--selected') : '')\n    );\n  }\n\n  render() {\n    return (\n      <div\n        {...this.getProps()}\n        onMouseEnter={() => {\n          this.setState({ selected: true });\n        }}\n        onMouseLeave={() => {\n          this.setState({ selected: false });\n        }}\n        data-name={this.props.name}\n        data-nodeid={this.props.node.getID()}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import {\n  CANVAS_PANNABLE,\n  CANVAS_ZOOMABLE,\n  CANVAS_ZOOMABLE_PANNABLE,\n  CANVAS_NOTIFICATION\n} from './types';\n\nexport function setCanvasZoomable(zoomable) {\n  return {\n    type: CANVAS_ZOOMABLE,\n    payload: zoomable\n  };\n}\n\nexport function setCanvasPannable(pannable) {\n  return {\n    type: CANVAS_PANNABLE,\n    payload: pannable\n  };\n}\n\nexport function setCanvasZoomingAndPanning(zoomingAndPanning) {\n  return {\n    type: CANVAS_ZOOMABLE_PANNABLE,\n    payload: zoomingAndPanning\n  };\n}\n\nexport function setCanvasNotification(notificationOptions) {\n  return {\n    type: CANVAS_NOTIFICATION,\n    payload: notificationOptions\n  };\n}\n","import axios from 'axios';\nimport {\n  SET_SCENARIO_ID,\n  SET_SCENARIO_NAME,\n  SET_SCENARIO_LOADING,\n  SET_SCENARIO_PAYLOAD\n} from './types';\nimport * as config from '../config';\nimport { setCanvasNotification } from './CanvasActions';\n\nexport function setScenarioId(id) {\n  return {\n    type: SET_SCENARIO_ID,\n    payload: id\n  };\n}\n\nexport function setScenarioName(name) {\n  return {\n    type: SET_SCENARIO_NAME,\n    payload: name\n  };\n}\n\nexport function setScenarioPayload(payload) {\n  return {\n    type: SET_SCENARIO_PAYLOAD,\n    payload\n  };\n}\n\nexport function setScenarioLoading(loading) {\n  return {\n    type: SET_SCENARIO_LOADING,\n    payload: loading\n  };\n}\n\nexport function fetchScenario(scenarioId) {\n  return dispatch => {\n    dispatch(setScenarioLoading(true));\n    return axios\n      .get(config.URL_SCENARIO_DETAIL + scenarioId)\n      .then(response => {\n        dispatch(setScenarioPayload(response.data));\n        dispatch(setScenarioName(response.data.name));\n        dispatch(setScenarioId(response.data.id));\n        dispatch(setScenarioLoading(false));\n      })\n      .catch(error => {\n        dispatch(setScenarioLoading(false));\n        dispatch(\n          setCanvasNotification({\n            open: true,\n            variant: 'error',\n            text: 'Scenario fetching failed.'\n          })\n        );\n        console.log(error);\n      });\n  };\n}\n","import axios from 'axios';\nimport * as config from './../config';\nimport { setScenarioLoading } from './ScenarioActions';\nimport { setCanvasNotification } from './CanvasActions';\n\nimport { SEGMENTS_CHANGED } from './types';\n\nexport function updateSegments(segments) {\n  return {\n    type: SEGMENTS_CHANGED,\n    payload: segments\n  };\n}\n\nexport function fetchSegments() {\n  return dispatch => {\n    dispatch(setScenarioLoading(true));\n    return axios\n      .get(`${config.URL_SEGMENTS_INDEX}`)\n      .then(response => {\n        dispatch(updateSegments(response.data.segments));\n        dispatch(setScenarioLoading(false));\n      })\n      .catch(error => {\n        console.log(error);\n        dispatch(setScenarioLoading(false));\n        dispatch(\n          setCanvasNotification({\n            open: true,\n            variant: 'error',\n            text: 'Segments fetching failed.'\n          })\n        );\n      });\n  };\n}\n","import axios from 'axios';\nimport * as config from './../config';\nimport { setScenarioLoading } from './ScenarioActions';\nimport { setCanvasNotification } from './CanvasActions';\n\nimport { TRIGGERS_CHANGED } from './types';\n\nexport function updateTriggers(triggers) {\n  return {\n    type: TRIGGERS_CHANGED,\n    payload: triggers\n  };\n}\n\nexport function fetchTriggers() {\n  return dispatch => {\n    dispatch(setScenarioLoading(true));\n    return axios\n      .get(`${config.URL_TRIGGERS_INDEX}`)\n      .then(response => {\n        dispatch(updateTriggers(response.data.events));\n        dispatch(setScenarioLoading(false));\n      })\n      .catch(error => {\n        dispatch(setScenarioLoading(false));\n        console.log(error);\n        dispatch(\n          setCanvasNotification({\n            open: true,\n            variant: 'error',\n            text: 'Triggers fetching failed.'\n          })\n        );\n      });\n  };\n}\n","import axios from 'axios';\nimport * as config from './../config';\nimport { setScenarioLoading } from './ScenarioActions';\nimport { setCanvasNotification } from './CanvasActions';\n\nimport { MAILS_CHANGED } from './types';\n\nexport function updateMails(mails) {\n  return {\n    type: MAILS_CHANGED,\n    payload: mails\n  };\n}\n\nexport function fetchMails() {\n  return dispatch => {\n    dispatch(setScenarioLoading(true));\n    return axios\n      .get(`${config.URL_MAILS_INDEX}`)\n      .then(response => {\n        dispatch(updateMails(response.data.mail_templates));\n        dispatch(setScenarioLoading(false));\n      })\n      .catch(error => {\n        dispatch(setScenarioLoading(false));\n        console.log(error);\n        dispatch(\n          setCanvasNotification({\n            open: true,\n            variant: 'error',\n            text: 'Mails fetching failed.'\n          })\n        );\n      });\n  };\n}\n","import axios from 'axios';\nimport * as config from './../config';\nimport { setScenarioLoading } from './ScenarioActions';\nimport { setCanvasNotification } from './CanvasActions';\nimport { GOALS_CHANGED } from './types';\n\nexport function updateGoals(goals) {\n  return {\n    type: GOALS_CHANGED,\n    payload: goals\n  };\n}\n\nexport function fetchGoals() {\n  return dispatch => {\n    dispatch(setScenarioLoading(true));\n    return axios\n      .get(config.URL_GOALS_INDEX)\n      .then(response => {\n        dispatch(updateGoals(response.data.goals));\n        dispatch(setScenarioLoading(false));\n      })\n      .catch(error => {\n        dispatch(setScenarioLoading(false));\n        console.log(error);\n        dispatch(\n          setCanvasNotification({\n            open: true,\n            variant: 'error',\n            text: 'Goals fetching failed.'\n          })\n        );\n      });\n  };\n}\n","import axios from 'axios';\nimport * as config from '../config';\nimport { setScenarioLoading } from './ScenarioActions';\nimport { setCanvasNotification } from './CanvasActions';\nimport { BANNERS_CHANGED } from './types';\n\nexport function updateBanners(banners) {\n  return {\n    type: BANNERS_CHANGED,\n    payload: banners\n  };\n}\n\nexport function fetchBanners() {\n  return dispatch => {\n    dispatch(setScenarioLoading(true));\n    return axios\n      .get(config.URL_BANNERS_INDEX)\n      .then(response => {\n        dispatch(updateBanners(response.data.banners));\n        dispatch(setScenarioLoading(false));\n      })\n      .catch(error => {\n        dispatch(setScenarioLoading(false));\n        console.log(error);\n        dispatch(\n          setCanvasNotification({\n            open: true,\n            variant: 'error',\n            text: 'Banners fetching failed.'\n          })\n        );\n      });\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Popover from '@material-ui/core/Popover';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\n\nimport * as config from '../config';\nimport { setCanvasNotification } from '../actions';\n\nclass StatisticsTooltip extends React.Component {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    anchorElement: PropTypes.instanceOf(Element)\n  };\n\n  state = {\n    html: null,\n    loading: true\n  };\n\n  componentDidUpdate(oldProps) {\n    if (\n      this.props.scenarioID &&\n      this.props.scenarioID !== oldProps.scenarioID\n    ) {\n      this.fetchStatistics();\n    }\n  }\n\n  fetchStatistics() {\n    const { dispatch, id, scenarioID } = this.props;\n    if (!scenarioID) return;\n\n    this.setState({ loading: true });\n    axios\n      .get(\n        `${config.URL_TOOLTIPS}?scenario_id=${scenarioID}&element_uuid=${id}`\n      )\n      .then(({ data }) => {\n        this.setState({ html: data.html });\n      })\n      .catch(error => {\n        console.log(error);\n        dispatch(\n          setCanvasNotification({\n            open: true,\n            variant: 'error',\n            text: 'Tooltip fetching failed.'\n          })\n        );\n      })\n      .then(() => {\n        this.setState({ loading: false });\n      });\n  }\n\n  render() {\n    const { anchorElement } = this.props;\n    const { html } = this.state;\n    if (!html) return null;\n\n    return (\n      <Popover\n        open={Boolean(anchorElement)}\n        anchorEl={anchorElement}\n        // onEnter={() => console.log('opened?')}\n        style={{ pointerEvents: 'none' }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center'\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center'\n        }}\n      >\n        {this.state.loading && (\n          <div className='node-tooltip-loader'>\n            <CircularProgress size={30} />\n          </div>\n        )}\n\n        <div\n          className='node-tooltip-wrapper'\n          dangerouslySetInnerHTML={{ __html: this.state.html }}\n        />\n      </Popover>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { scenario } = state;\n\n  return {\n    scenarioID: scenario.id\n  };\n}\n\nexport default connect(mapStateToProps)(StatisticsTooltip);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Select from 'react-select';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { emphasize } from '@material-ui/core/styles/colorManipulator';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    // height: 250\n    marginTop: '10px',\n    marginBottom: '10px',\n    fontFamily: 'Roboto, Helvetica, Arial, sans-serif'\n  },\n  input: {\n    display: 'flex',\n    padding: 0\n  },\n  valueContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flex: 1,\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  chip: {\n    margin: `${theme.spacing.unit / 2}px ${theme.spacing.unit / 4}px`\n  },\n  chipFocused: {\n    backgroundColor: emphasize(\n      theme.palette.type === 'light'\n        ? theme.palette.grey[300]\n        : theme.palette.grey[700],\n      0.08\n    )\n  },\n  noOptionsMessage: {\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`\n  },\n  singleValue: {\n    fontSize: 16\n  },\n  placeholder: {\n    position: 'absolute',\n    left: 2,\n    fontSize: 16\n  },\n  paper: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing.unit,\n    left: 0,\n    right: 0\n  },\n  divider: {\n    height: theme.spacing.unit * 2\n  }\n});\n\nfunction NoOptionsMessage(props) {\n  return (\n    <Typography\n      color='textSecondary'\n      className={props.selectProps.classes.noOptionsMessage}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  );\n}\n\nfunction inputComponent({ inputRef, ...props }) {\n  return <div ref={inputRef} {...props} />;\n}\n\nfunction Control(props) {\n  return (\n    <TextField\n      fullWidth\n      InputProps={{\n        inputComponent,\n        inputProps: {\n          className: props.selectProps.classes.input,\n          inputRef: props.innerRef,\n          children: props.children,\n          ...props.innerProps\n        }\n      }}\n      {...props.selectProps.textFieldProps}\n    />\n  );\n}\n\nfunction Option(props) {\n  return (\n    <MenuItem\n      buttonRef={props.innerRef}\n      selected={props.isFocused}\n      component='div'\n      style={{\n        fontWeight: props.isSelected ? 500 : 400\n      }}\n      {...props.innerProps}\n    >\n      {props.children}\n    </MenuItem>\n  );\n}\n\nfunction Placeholder(props) {\n  return (\n    <Typography\n      color='textSecondary'\n      className={props.selectProps.classes.placeholder}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  );\n}\n\nfunction SingleValue(props) {\n  return (\n    <Typography\n      className={props.selectProps.classes.singleValue}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  );\n}\n\nfunction ValueContainer(props) {\n  return (\n    <div className={props.selectProps.classes.valueContainer}>\n      {props.children}\n    </div>\n  );\n}\n\nfunction MultiValue(props) {\n  return (\n    <Chip\n      tabIndex={-1}\n      label={props.children}\n      className={classNames(props.selectProps.classes.chip, {\n        [props.selectProps.classes.chipFocused]: props.isFocused\n      })}\n      onDelete={props.removeProps.onClick}\n      deleteIcon={<CancelIcon {...props.removeProps} />}\n    />\n  );\n}\n\nfunction Menu(props) {\n  return (\n    <Paper\n      square\n      className={props.selectProps.classes.paper}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Paper>\n  );\n}\n\nconst components = {\n  Control,\n  Menu,\n  MultiValue,\n  NoOptionsMessage,\n  Option,\n  Placeholder,\n  SingleValue,\n  ValueContainer\n};\n\nclass MaterialSelect extends React.Component {\n  state = {\n    single: null,\n    multi: null\n  };\n\n  handleChange = name => value => {\n    this.setState({\n      [name]: value\n    });\n  };\n\n  render() {\n    const { classes, theme } = this.props;\n\n    const selectStyles = {\n      input: base => ({\n        ...base,\n        color: theme.palette.text.primary,\n        '& input': {\n          font: 'inherit'\n        }\n      })\n    };\n\n    return (\n      <div className={classes.root}>\n        <Select\n          classes={classes}\n          styles={selectStyles} \n          components={components}\n          menuPosition={'fixed'}\n          textFieldProps={{\n            label: this.props.label,\n            InputLabelProps: {\n              shrink: true\n            }\n          }}\n          isMulti={this.props.isMulti}\n          options={this.props.options}\n          value={this.props.value}\n          onChange={this.props.onChange}\n          placeholder={this.props.placeholder}\n        />\n      </div>\n    );\n  }\n}\n\nMaterialSelect.propTypes = {\n  classes: PropTypes.object,\n  theme: PropTypes.object,\n  options: PropTypes.array,\n  placeholder: PropTypes.string,\n  label: PropTypes.string,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  isMulti: PropTypes.bool\n};\n\nMaterialSelect.defaultProp = {\n  isMulti: false\n};\n\nexport default withStyles(styles, { withTheme: true })(MaterialSelect);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport ActionIcon from '@material-ui/icons/Mail';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport groupBy from 'lodash/groupBy';\n\nimport { PortWidget } from '../../widgets/PortWidget';\nimport StatisticsTooltip from '../../StatisticTooltip';\nimport MaterialSelect from '../../MaterialSelect';\nimport { setCanvasZoomingAndPanning } from '../../../actions';\n\nclass NodeWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodeFormName: this.props.node.name,\n      selectedMail: this.props.node.selectedMail,\n      dialogOpened: false,\n      anchorElementForTooltip: null\n    };\n  }\n\n  bem(selector) {\n    return (\n      this.props.classBaseName +\n      selector +\n      ' ' +\n      this.props.className +\n      selector +\n      ' '\n    );\n  }\n\n  getClassName() {\n    return this.props.classBaseName + ' ' + this.props.className;\n  }\n\n  openDialog = () => {\n    this.setState({\n      dialogOpened: true,\n      nodeFormName: this.props.node.name,\n      anchorElementForTooltip: null\n    });\n    this.props.dispatch(setCanvasZoomingAndPanning(false));\n  };\n\n  closeDialog = () => {\n    this.setState({ dialogOpened: false });\n    this.props.dispatch(setCanvasZoomingAndPanning(true));\n  };\n\n  handleNodeMouseEnter = event => {\n    if (!this.state.dialogOpened) {\n      this.setState({ anchorElementForTooltip: event.currentTarget });\n    }\n  };\n\n  handleNodeMouseLeave = () => {\n    this.setState({ anchorElementForTooltip: null });\n  };\n\n  getFormatedValue = () => {\n    const match = this.props.mails.find(mail => {\n      return mail.code === this.state.selectedMail;\n    });\n\n    return match\n      ? {\n          value: match.code,\n          label: match.name\n        }\n      : {};\n  };\n\n  // maybe refactor to more effective way if is a problem\n  transformOptionsForSelect = () => {\n    const lodashGrouped = groupBy(\n      this.props.mails,\n      mail => mail.mail_type.code\n    );\n\n    const properlyGrouped = [];\n\n    Object.keys(lodashGrouped).forEach(key => {\n      properlyGrouped.push({\n        label: lodashGrouped[key][0].mail_type.name,\n        sorting: lodashGrouped[key][0].mail_type.sorting,\n        options: lodashGrouped[key].map(mail => ({\n          value: mail.code,\n          label: mail.name\n        }))\n      });\n    });\n\n    const properlyGroupedSorted = properlyGrouped.sort((a, b) => {\n      return a.sorting - b.sorting;\n    });\n\n    return properlyGroupedSorted;\n  };\n\n  getSelectedMailValue = () => {\n    const selected = this.props.mails.find(\n      mail => mail.code === this.props.node.selectedMail\n    );\n\n    return selected ? ` - ${selected.name}` : '';\n  };\n\n  render() {\n    return (\n      <div\n        className={this.getClassName()}\n        style={{ background: this.props.node.color }}\n        onDoubleClick={() => {\n          this.openDialog();\n        }}\n        onMouseEnter={this.handleNodeMouseEnter}\n        onMouseLeave={this.handleNodeMouseLeave}\n      >\n        <div className='node-container'>\n          <div className={this.bem('__icon')}>\n            <ActionIcon />\n          </div>\n\n          <div className={this.bem('__ports')}>\n            <div className={this.bem('__left')}>\n              <PortWidget name='left' node={this.props.node} />\n            </div>\n            <div className={this.bem('__right')}>\n              <PortWidget name='right' node={this.props.node} />\n            </div>\n          </div>\n        </div>\n        <div className={this.bem('__title')}>\n          <div className={this.bem('__name')}>\n            {this.props.node.name\n              ? this.props.node.name\n              : `Mail ${this.getSelectedMailValue()}`}\n          </div>\n        </div>\n\n        <StatisticsTooltip\n          id={this.props.node.id}\n          anchorElement={this.state.anchorElementForTooltip}\n        />\n\n        <Dialog\n          open={this.state.dialogOpened}\n          onClose={this.closeDialog}\n          aria-labelledby='form-dialog-title'\n          onKeyUp={event => {\n            if (event.keyCode === 46 || event.keyCode === 8) {\n              event.preventDefault();\n              event.stopPropagation();\n              return false;\n            }\n          }}\n          fullWidth\n        >\n          <DialogTitle id='form-dialog-title'>Email node</DialogTitle>\n\n          <DialogContent>\n            <DialogContentText>Sends an email to user.</DialogContentText>\n\n            <Grid container spacing={32}>\n              <Grid item xs={6}>\n                <TextField\n                  margin='normal'\n                  id='action-name'\n                  label='Node name'\n                  fullWidth\n                  value={this.state.nodeFormName}\n                  onChange={event => {\n                    this.setState({\n                      nodeFormName: event.target.value\n                    });\n                  }}\n                />\n              </Grid>\n            </Grid>\n\n            <Grid container spacing={32}>\n              <Grid item xs={12}>\n                <MaterialSelect\n                  options={this.transformOptionsForSelect()}\n                  value={this.getFormatedValue()}\n                  onChange={event => {\n                    this.setState({\n                      selectedMail: event.value\n                    });\n                  }}\n                  placeholder='Pick one'\n                  label='Selected Mail'\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n\n          <DialogActions>\n            <Button\n              color='secondary'\n              onClick={() => {\n                this.closeDialog();\n              }}\n            >\n              Cancel\n            </Button>\n\n            <Button\n              color='primary'\n              onClick={() => {\n                // https://github.com/projectstorm/react-diagrams/issues/50 huh\n\n                this.props.node.name = this.state.nodeFormName;\n                this.props.node.selectedMail = this.state.selectedMail;\n\n                this.props.diagramEngine.repaintCanvas();\n                this.closeDialog();\n              }}\n            >\n              Save changes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    mails: state.mails.availableMails\n  };\n}\n\nexport default connect(mapStateToProps)(NodeWidget);\n","import * as React from 'react';\nimport { AbstractNodeFactory } from 'storm-react-diagrams';\n\nimport NodeWidget from './NodeWidget';\nimport { NodeModel } from './NodeModel';\n\nexport class NodeFactory extends AbstractNodeFactory {\n  constructor() {\n    super('email');\n  }\n\n  generateReactWidget(diagramEngine, node) {\n    return (\n      <NodeWidget\n        diagramEngine={diagramEngine}\n        node={node}\n        classBaseName='square-node'\n        className='email-node'\n      />\n    );\n  }\n\n  getNewInstance() {\n    return new NodeModel();\n  }\n}\n","import { LeftRightPort } from '../Ports';\n\nexport class PortModel extends LeftRightPort {\n  constructor(position = 'left') {\n    super(position, 'banner');\n  }\n}\n","import { NodeModel as BaseNodeModel } from 'storm-react-diagrams';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\n\nexport class NodeModel extends BaseNodeModel {\n  constructor(element) {\n    super('banner', element.id);\n\n    this.name = element.name;\n    this.selectedBanner = element.selectedBanner;\n\n    this.expiresInTime = element.expiresInTime;\n    this.expiresInUnit = element.expiresInUnit;\n\n    this.addPort(new PortModel('left'));\n    this.addPort(new PortModel('right'));\n  }\n\n  deSerialize(ob, engine) {\n    super.deSerialize(ob, engine);\n    this.name = ob.name;\n    this.selectedBanner = ob.selectedBanner;\n\n    this.expiresInTime = ob.expiresInTime || '1';\n    this.expiresInUnit = ob.expiresInUnit || 'days';\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      name: this.name,\n      selectedBanner: this.selectedBanner,\n      expiresInTime: this.expiresInTime,\n      expiresInUnit: this.expiresInUnit,\n    });\n  }\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport ActionIcon from '@material-ui/icons/Adjust';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { PortWidget } from '../../widgets/PortWidget';\nimport StatisticsTooltip from '../../StatisticTooltip';\nimport MaterialSelect from '../../MaterialSelect';\nimport { setCanvasZoomingAndPanning } from '../../../actions';\n\nclass NodeWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodeFormName: this.props.node.name,\n      selectedBanner: this.props.node.selectedBanner,\n      dialogOpened: false,\n      anchorElementForTooltip: null,\n      expiresInTime: this.props.node.expiresInTime,\n      expiresInUnit: this.props.node.expiresInUnit,\n    };\n  }\n\n  bem(selector) {\n    return (\n      this.props.classBaseName +\n      selector +\n      ' ' +\n      this.props.className +\n      selector +\n      ' '\n    );\n  }\n\n  getClassName() {\n    return this.props.classBaseName + ' ' + this.props.className;\n  }\n\n  openDialog = () => {\n    this.setState({\n      dialogOpened: true,\n      nodeFormName: this.props.node.name,\n      anchorElementForTooltip: null\n    });\n    this.props.dispatch(setCanvasZoomingAndPanning(false));\n  };\n\n  closeDialog = () => {\n    this.setState({ dialogOpened: false });\n    this.props.dispatch(setCanvasZoomingAndPanning(true));\n  };\n\n  handleNodeMouseEnter = event => {\n    if (!this.state.dialogOpened) {\n      this.setState({ anchorElementForTooltip: event.currentTarget });\n    }\n  };\n\n  handleNodeMouseLeave = () => {\n    this.setState({ anchorElementForTooltip: null });\n  };\n\n  getFormatedValue = () => {\n    const match = this.props.banners.find(banner => {\n      return banner.id === this.state.selectedBanner;\n    });\n\n    return match\n      ? {\n          value: match.id,\n          label: match.name\n        }\n      : {};\n  };\n\n  // maybe refactor to more effective way if is a problem\n  transformOptionsForSelect = () => {\n    const banners = this.props.banners.map(banner => ({\n      value: banner.id,\n      label: banner.name,\n    }));\n    return banners;\n  };\n\n  getSelectedMailValue = () => {\n    const selected = this.props.banners.find(\n      banner => banner.id === this.props.node.selectedBanner\n    );\n\n    return selected ? ` - ${selected.name}` : '';\n  };\n\n  render() {\n    return (\n      <div\n        className={this.getClassName()}\n        style={{ background: this.props.node.color }}\n        onDoubleClick={() => {\n          this.openDialog();\n        }}\n        onMouseEnter={this.handleNodeMouseEnter}\n        onMouseLeave={this.handleNodeMouseLeave}\n      >\n        <div className='node-container'>\n          <div className={this.bem('__icon')}>\n            <ActionIcon />\n          </div>\n\n          <div className={this.bem('__ports')}>\n            <div className={this.bem('__left')}>\n              <PortWidget name='left' node={this.props.node} />\n            </div>\n            <div className={this.bem('__right')}>\n              <PortWidget name='right' node={this.props.node} />\n            </div>\n          </div>\n        </div>\n        <div className={this.bem('__title')}>\n          <div className={this.bem('__name')}>\n            {this.props.node.name\n              ? this.props.node.name\n              : `Banner ${this.getSelectedMailValue()}`}\n          </div>\n        </div>\n\n        <StatisticsTooltip\n          id={this.props.node.id}\n          anchorElement={this.state.anchorElementForTooltip}\n        />\n\n        <Dialog\n          open={this.state.dialogOpened}\n          onClose={this.closeDialog}\n          aria-labelledby='form-dialog-title'\n          onKeyUp={event => {\n            if (event.keyCode === 46 || event.keyCode === 8) {\n              event.preventDefault();\n              event.stopPropagation();\n              return false;\n            }\n          }}\n          fullWidth\n        >\n          <DialogTitle id='form-dialog-title'>Banner node</DialogTitle>\n\n          <DialogContent>\n            <DialogContentText>Shows a one-time banner to user.</DialogContentText>\n\n            <Grid container spacing={32}>\n              <Grid item xs={6}>\n                <TextField\n                  margin='normal'\n                  id='action-name'\n                  label='Node name'\n                  fullWidth\n                  value={this.state.nodeFormName}\n                  onChange={event => {\n                    this.setState({\n                      nodeFormName: event.target.value\n                    });\n                  }}\n                />\n              </Grid>\n            </Grid>\n\n            <Grid container spacing={32}>\n              <Grid item xs={12}>\n                <MaterialSelect\n                  options={this.transformOptionsForSelect()}\n                  value={this.getFormatedValue()}\n                  onChange={event => {\n                    this.setState({\n                      selectedBanner: event.value\n                    });\n                  }}\n                  placeholder='Pick one'\n                  label='Selected Banner'\n                />\n              </Grid>\n            </Grid>\n\n            <Grid container spacing={32}>\n              <Grid item xs={6}>\n                <TextField\n                  id='expires-in-time'\n                  label='Expires in'\n                  type='number'\n                  helperText=\"Banner is not shown after given period\"\n                  fullWidth\n                  value={this.state.expiresInTime}\n                  onChange={event => {\n                    this.setState({\n                      expiresInTime: event.target.value\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <FormControl fullWidth>\n                  <InputLabel htmlFor='time-unit'>Time unit</InputLabel>\n                  <Select\n                    value={this.state.expiresInUnit}\n                    onChange={event => {\n                      this.setState({\n                        expiresInUnit: event.target.value\n                      });\n                    }}\n                    inputProps={{\n                      name: 'expires-in-unit',\n                      id: 'expires-in-unit'\n                    }}\n                  >\n                    <MenuItem value='minutes'>Minutes</MenuItem>\n                    <MenuItem value='hours'>Hours</MenuItem>\n                    <MenuItem value='days'>Days</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n          </DialogContent>\n\n          <DialogActions>\n            <Button\n              color='secondary'\n              onClick={() => {\n                this.closeDialog();\n              }}\n            >\n              Cancel\n            </Button>\n\n            <Button\n              color='primary'\n              onClick={() => {\n                // https://github.com/projectstorm/react-diagrams/issues/50 huh\n\n                this.props.node.name = this.state.nodeFormName;\n                this.props.node.selectedBanner = this.state.selectedBanner;\n                this.props.node.expiresInTime = this.state.expiresInTime;\n                this.props.node.expiresInUnit = this.state.expiresInUnit;\n\n                this.props.diagramEngine.repaintCanvas();\n                this.closeDialog();\n              }}\n            >\n              Save changes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    banners: state.banners.availableBanners\n  };\n}\n\nexport default connect(mapStateToProps)(NodeWidget);\n","import * as React from 'react';\nimport { AbstractNodeFactory } from 'storm-react-diagrams';\n\nimport NodeWidget from './NodeWidget';\nimport { NodeModel } from './NodeModel';\n\nexport class NodeFactory extends AbstractNodeFactory {\n  constructor() {\n    super('banner');\n  }\n\n  generateReactWidget(diagramEngine, node) {\n    return (\n      <NodeWidget\n        diagramEngine={diagramEngine}\n        node={node}\n        classBaseName='square-node'\n        className='banner-node'\n      />\n    );\n  }\n\n  getNewInstance() {\n    return new NodeModel();\n  }\n}\n","import { LeftRightBottomPort } from './../Ports';\n\nexport class PortModel extends LeftRightBottomPort {\n  constructor(position = 'top') {\n    super(position, 'segment');\n  }\n}\n","import { NodeModel as BaseNodeModel } from 'storm-react-diagrams';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\n\nexport class NodeModel extends BaseNodeModel {\n  constructor(element) {\n    super('segment', element.id);\n\n    this.name = element.name;\n    this.selectedSegment = element.selectedSegment;\n\n    this.addPort(new PortModel('left'));\n    this.addPort(new PortModel('bottom'));\n    this.addPort(new PortModel('right'));\n  }\n\n  deSerialize(ob, engine) {\n    super.deSerialize(ob, engine);\n    this.name = ob.name;\n    this.selectedSegment = ob.selectedSegment;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      name: this.name,\n      selectedSegment: this.selectedSegment\n    });\n  }\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport SegmentIcon from '@material-ui/icons/SubdirectoryArrowRight';\nimport OkIcon from '@material-ui/icons/Check';\nimport NopeIcon from '@material-ui/icons/Close';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Icon from '@material-ui/core/Icon';\nimport groupBy from 'lodash/groupBy';\n\nimport StatisticsTooltip from '../../StatisticTooltip';\nimport { PortWidget } from './../../widgets/PortWidget';\nimport MaterialSelect from '../../MaterialSelect';\nimport { setCanvasZoomingAndPanning } from '../../../actions';\nimport SegmenterService from '../../../services/SegmenterService';\nimport { fetchSegments } from '../../../actions';\n\nclass NodeWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodeFormName: this.props.node.name,\n      selectedSegment: this.props.node.selectedSegment,\n      dialogOpened: false,\n      anchorElementForTooltip: null,\n      creatingNewSegment: false\n    };\n  }\n\n  bem(selector) {\n    return (\n      this.props.classBaseName +\n      selector +\n      ' ' +\n      this.props.className +\n      selector +\n      ' '\n    );\n  }\n\n  getClassName() {\n    return this.props.classBaseName + ' ' + this.props.className;\n  }\n\n  openDialog = () => {\n    this.setState({\n      dialogOpened: true,\n      nodeFormName: this.props.node.name,\n      selectedSegment: this.props.node.selectedSegment,\n      anchorElementForTooltip: null\n    });\n    this.props.dispatch(setCanvasZoomingAndPanning(false));\n  };\n\n  closeDialog = () => {\n    this.setState({ dialogOpened: false });\n    this.props.dispatch(setCanvasZoomingAndPanning(true));\n  };\n\n  // maybe refactor to more effective way if is a problem\n  transformOptionsForSelect = () => {\n    const lodashGrouped = groupBy(\n      this.props.segments,\n      segment => segment.group.name\n    );\n\n    const properlyGrouped = [];\n\n    Object.keys(lodashGrouped).forEach(key => {\n      properlyGrouped.push({\n        label: key,\n        sorting: lodashGrouped[key][0].group.sorting,\n        options: lodashGrouped[key].map(segment => ({\n          value: segment.code,\n          label: segment.name\n        }))\n      });\n    });\n\n    const properlyGroupedSorted = properlyGrouped.sort((a, b) => {\n      return a.sorting - b.sorting;\n    });\n\n    return properlyGroupedSorted;\n  };\n\n  handleNodeMouseEnter = event => {\n    if (!this.state.dialogOpened) {\n      this.setState({ anchorElementForTooltip: event.currentTarget });\n    }\n  };\n\n  handleNodeMouseLeave = () => {\n    this.setState({ anchorElementForTooltip: null });\n  };\n\n  getFormatedValue = () => {\n    const match = this.props.segments.find(segment => {\n      return segment.code === this.state.selectedSegment;\n    });\n\n    return match\n      ? {\n          value: match.code,\n          label: match.name\n        }\n      : {};\n  };\n\n  getSelectedSegmentValue = () => {\n    const selected = this.props.segments.find(\n      segment => segment.code === this.props.node.selectedSegment\n    );\n\n    return selected ? ` - ${selected.name}` : '';\n  };\n\n  handleNewSegmentClick = () => {\n    window.addEventListener('savedSegment', this.handleSavedNewSegment);\n    window.addEventListener('canceledNewSegment', this.handleCancelNewSegment);\n    this.setState({ creatingNewSegment: true });\n    setTimeout(() => {\n      SegmenterService.init();\n    });\n  };\n\n  handleSavedNewSegment = event => {\n    this.props.dispatch(fetchSegments());\n    this.setState({\n      selectedSegment: event.detail.code,\n      creatingNewSegment: false\n    });\n    this.props.node.name = this.state.nodeFormName;\n    this.props.node.selectedSegment = this.state.selectedSegment;\n    this.props.diagramEngine.repaintCanvas();\n    this.closeDialog();\n    window.removeEventListener('savedSegment', this.handleSavedNewSegment);\n  };\n\n  handleCancelNewSegment = event => {\n    this.setState({ creatingNewSegment: false });\n    window.removeEventListener(\n      'canceledNewSegment',\n      this.handleSavedNewSegment\n    );\n  };\n\n  render() {\n    return (\n      <div\n        className={this.getClassName()}\n        onDoubleClick={() => {\n          this.openDialog();\n        }}\n        onMouseEnter={this.handleNodeMouseEnter}\n        onMouseLeave={this.handleNodeMouseLeave}\n      >\n        <div className={this.bem('__title')}>\n          <div className={this.bem('__name')}>\n            {this.props.node.name\n              ? this.props.node.name\n              : `Segment ${this.getSelectedSegmentValue()}`}\n          </div>\n        </div>\n\n        <div className='node-container'>\n          <div className={this.bem('__icon')}>\n            <SegmentIcon />\n          </div>\n\n          <div className={this.bem('__ports')}>\n            <div className={this.bem('__left')}>\n              <PortWidget name='left' node={this.props.node} />\n            </div>\n\n            <div className={this.bem('__right')}>\n              <PortWidget name='right' node={this.props.node}>\n                <OkIcon\n                  style={{\n                    position: 'absolute',\n                    top: '-20px',\n                    right: '-20px',\n                    color: '#2ECC40'\n                  }}\n                />\n              </PortWidget>\n            </div>\n\n            <div className={this.bem('__bottom')}>\n              <PortWidget name='bottom' node={this.props.node}>\n                <NopeIcon\n                  style={{\n                    position: 'absolute',\n                    top: '8px',\n                    right: '-22px',\n                    color: '#FF695E'\n                  }}\n                />\n              </PortWidget>\n            </div>\n          </div>\n        </div>\n\n        <StatisticsTooltip\n          id={this.props.node.id}\n          anchorElement={this.state.anchorElementForTooltip}\n        />\n\n        <Dialog\n          open={this.state.dialogOpened}\n          onClose={this.closeDialog}\n          aria-labelledby='form-dialog-title'\n          onKeyUp={event => {\n            if (event.keyCode === 46 || event.keyCode === 8) {\n              event.preventDefault();\n              event.stopPropagation();\n              return false;\n            }\n          }}\n          fullScreen={this.state.creatingNewSegment}\n          disableEscapeKeyDown={this.state.creatingNewSegment}\n        >\n          {!this.state.creatingNewSegment && (\n            <>\n              <DialogTitle id='form-dialog-title'>Segment node</DialogTitle>\n\n              <DialogContent>\n                <DialogContentText>\n                  Segments evaluate user's presence in a group of users defined\n                  by system-provided conditions. Execution flow can be directed\n                  based on presence/absence of user within the selected segment.\n                  You can either pick one of the existing segments or create a\n                  new one.\n                </DialogContentText>\n\n                <Grid container spacing={32}>\n                  <Grid item xs={6}>\n                    <TextField\n                      margin='normal'\n                      id='segment-name'\n                      label='Node name'\n                      fullWidth\n                      value={this.state.nodeFormName}\n                      onChange={event => {\n                        this.setState({\n                          nodeFormName: event.target.value\n                        });\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n\n                <Grid container spacing={32} alignItems='flex-end'>\n                  <Grid item xs={8}>\n                    <MaterialSelect\n                      options={this.transformOptionsForSelect()}\n                      value={this.getFormatedValue()}\n                      onChange={event => {\n                        console.log(event.value);\n                        this.setState({\n                          selectedSegment: event.value\n                        });\n                      }}\n                      placeholder='Pick one'\n                      label='Selected Segment'\n                    />\n                  </Grid>\n                  {window.RempSegmenter && (\n                    <Grid item xs={4}>\n                      <Button\n                        variant='contained'\n                        color='primary'\n                        size='small'\n                        style={{ position: 'relative', bottom: '10px' }}\n                        onClick={this.handleNewSegmentClick}\n                      >\n                        <Icon style={{ marginRight: '5px' }}>add_circle</Icon>\n                        New segment\n                      </Button>\n                    </Grid>\n                  )}\n                </Grid>\n              </DialogContent>\n            </>\n          )}\n\n          {this.state.creatingNewSegment && (\n            <DialogContent>\n              <div\n                id='segmenter'\n                style={{ position: 'fixed', zIndex: '99999999' }}\n              />\n            </DialogContent>\n          )}\n\n          {!this.state.creatingNewSegment && (\n            <DialogActions>\n              <Button\n                color='secondary'\n                onClick={() => {\n                  this.closeDialog();\n                }}\n              >\n                Cancel\n              </Button>\n\n              <Button\n                color='primary'\n                onClick={() => {\n                  // https://github.com/projectstorm/react-diagrams/issues/50 huh\n\n                  this.props.node.name = this.state.nodeFormName;\n                  this.props.node.selectedSegment = this.state.selectedSegment;\n\n                  this.props.diagramEngine.repaintCanvas();\n                  this.closeDialog();\n                }}\n              >\n                Save changes\n              </Button>\n            </DialogActions>\n          )}\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { segments, dispatch } = state;\n\n  return {\n    segments: segments.avalaibleSegments,\n    dispatch\n  };\n}\n\nexport default connect(mapStateToProps)(NodeWidget);\n","import * as React from 'react';\nimport { AbstractNodeFactory } from 'storm-react-diagrams';\n\nimport NodeWidget from './NodeWidget';\nimport { NodeModel } from './NodeModel';\n\nexport class NodeFactory extends AbstractNodeFactory {\n  constructor() {\n    super('segment');\n  }\n\n  generateReactWidget(diagramEngine, node) {\n    return (\n      <NodeWidget\n        diagramEngine={diagramEngine}\n        node={node}\n        classBaseName='diamond-node'\n        className='segment-node'\n      />\n    );\n  }\n\n  getNewInstance() {\n    return new NodeModel();\n  }\n}\n","import { LeftRightPort } from './../Ports';\n\nexport class PortModel extends LeftRightPort {\n  constructor(position = 'left') {\n    super(position, 'trigger');\n  }\n}\n","import * as _ from 'lodash';\nimport { NodeModel as BaseNodeModel } from 'storm-react-diagrams';\nimport { PortModel } from './PortModel';\n\nexport class NodeModel extends BaseNodeModel {\n  constructor(element) {\n    super('trigger', element.id);\n\n    this.name = element.name;\n    this.selectedTrigger = element.selectedTrigger;\n    this.addPort(new PortModel('right'));\n  }\n\n  deSerialize(ob, engine) {\n    super.deSerialize(ob, engine);\n    this.name = ob.name;\n    this.selectedTrigger = ob.selectedTrigger;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      name: this.name,\n      selectedTrigger: this.selectedTrigger\n    });\n  }\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport TriggerIcon from '@material-ui/icons/Notifications';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { PortWidget } from './../../widgets/PortWidget';\nimport MaterialSelect from '../../MaterialSelect';\nimport StatisticsTooltip from '../../StatisticTooltip';\nimport { setCanvasZoomingAndPanning } from '../../../actions';\n\nclass NodeWidget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nodeFormName: this.props.node.name,\n      selectedTrigger: this.props.node.selectedTrigger,\n      dialogOpened: false,\n      anchorElementForTooltip: null\n    };\n  }\n\n  bem(selector) {\n    return (\n      this.props.classBaseName +\n      selector +\n      ' ' +\n      this.props.className +\n      selector +\n      ' '\n    );\n  }\n\n  getClassName() {\n    return this.props.classBaseName + ' ' + this.props.className;\n  }\n\n  openDialog = () => {\n    this.setState({\n      dialogOpened: true,\n      nodeFormName: this.props.node.name,\n      anchorElementForTooltip: null\n    });\n    this.props.dispatch(setCanvasZoomingAndPanning(false));\n  };\n\n  closeDialog = () => {\n    this.setState({ dialogOpened: false });\n    this.props.dispatch(setCanvasZoomingAndPanning(true));\n  };\n\n  handleNodeMouseEnter = event => {\n    if (!this.state.dialogOpened) {\n      this.setState({ anchorElementForTooltip: event.currentTarget });\n    }\n  };\n\n  handleNodeMouseLeave = () => {\n    this.setState({ anchorElementForTooltip: null });\n  };\n\n  getTriggersInSelectableFormat = () => {\n    return this.props.triggers.map(trigger => {\n      return {\n        value: trigger.code,\n        label: trigger.name\n      };\n    });\n  };\n\n  getSelectedTriggerValue = () => {\n    const selected = this.getTriggersInSelectableFormat().find(\n      trigger => trigger.value === this.props.node.selectedTrigger\n    );\n\n    return selected ? ` - ${selected.label}` : '';\n  };\n\n  render() {\n    return (\n      <div\n        className={this.getClassName()}\n        style={{ background: this.props.node.color }}\n        onDoubleClick={() => {\n          this.openDialog();\n        }}\n        onMouseEnter={this.handleNodeMouseEnter}\n        onMouseLeave={this.handleNodeMouseLeave}\n      >\n        <div className='node-container'>\n          <div className={this.bem('__icon')}>\n            <TriggerIcon />\n          </div>\n\n          <div className={this.bem('__ports')}>\n            <div className={this.bem('__right')}>\n              <PortWidget name='right' node={this.props.node} />\n            </div>\n          </div>\n        </div>\n\n        <div className={this.bem('__title')}>\n          <div className={this.bem('__name')}>\n            {this.props.node.name\n              ? this.props.node.name\n              : `Event ${this.getSelectedTriggerValue()}`}\n          </div>\n        </div>\n\n        {/* TODO: fix tooltip in triggers */}\n        {/* <StatisticsTooltip\n          id={this.props.node.id}\n          anchorElement={this.state.anchorElementForTooltip}\n        /> */}\n\n        <Dialog\n          open={this.state.dialogOpened}\n          onClose={this.closeDialog}\n          aria-labelledby='form-dialog-title'\n          onKeyUp={event => {\n            if (event.keyCode === 46 || event.keyCode === 8) {\n              event.preventDefault();\n              event.stopPropagation();\n              return false;\n            }\n          }}\n        >\n          <DialogTitle id='form-dialog-title'>Trigger node</DialogTitle>\n\n          <DialogContent>\n            <DialogContentText>\n              Events are emitted on any change related to user. We recommend to\n              combine \"before\" events with \"Wait\" operations to achieve\n              execution at any desired time.\n            </DialogContentText>\n\n            <Grid container spacing={32}>\n              <Grid item xs={6}>\n                <TextField\n                  margin='normal'\n                  id='trigger-name'\n                  label='Node name'\n                  fullWidth\n                  value={this.state.nodeFormName}\n                  onChange={event => {\n                    this.setState({\n                      nodeFormName: event.target.value\n                    });\n                  }}\n                />\n              </Grid>\n            </Grid>\n\n            <Grid container spacing={32}>\n              <Grid item xs={12}>\n                <MaterialSelect\n                  options={this.getTriggersInSelectableFormat()}\n                  value={this.getTriggersInSelectableFormat().find(\n                    option => option.value === this.state.selectedTrigger\n                  )}\n                  onChange={event => {\n                    this.setState({\n                      selectedTrigger: event.value\n                    });\n                  }}\n                  placeholder='Pick one'\n                  label='Selected Trigger'\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n\n          <DialogActions>\n            <Button\n              color='secondary'\n              onClick={() => {\n                this.closeDialog();\n              }}\n            >\n              Cancel\n            </Button>\n\n            <Button\n              color='primary'\n              onClick={() => {\n                // https://github.com/projectstorm/react-diagrams/issues/50 huh\n\n                this.props.node.name = this.state.nodeFormName;\n                this.props.node.selectedTrigger = this.state.selectedTrigger;\n\n                this.props.diagramEngine.repaintCanvas();\n                this.closeDialog();\n              }}\n            >\n              Save changes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { triggers } = state;\n\n  return {\n    triggers: triggers.avalaibleTriggers\n  };\n}\n\nexport default connect(mapStateToProps)(NodeWidget);\n","import * as React from 'react';\nimport { AbstractNodeFactory } from 'storm-react-diagrams';\n\nimport NodeWidget from './NodeWidget';\nimport { NodeModel } from './NodeModel';\n\nexport class NodeFactory extends AbstractNodeFactory {\n  constructor() {\n    super('trigger');\n  }\n\n  generateReactWidget(diagramEngine, node) {\n    return (\n      <NodeWidget\n        diagramEngine={diagramEngine}\n        node={node}\n        classBaseName='square-node'\n        className='trigger-node'\n      />\n    );\n  }\n\n  getNewInstance() {\n    return new NodeModel();\n  }\n}\n","import { LeftRightPort } from './../Ports';\n\nexport class PortModel extends LeftRightPort {\n  constructor(position = 'left') {\n    super(position, 'wait');\n  }\n}\n","import * as _ from 'lodash';\nimport { NodeModel as BaseNodeModel } from 'storm-react-diagrams';\nimport { PortModel } from './PortModel';\n\nexport class NodeModel extends BaseNodeModel {\n  constructor(element) {\n    super('wait', element.id);\n\n    this.name = element.name;\n    this.waitingTime = element.waitingTime || 10;\n    this.waitingUnit = element.waitingUnit || 'minutes';\n\n    this.addPort(new PortModel('left'));\n    this.addPort(new PortModel('right'));\n  }\n\n  deSerialize(ob, engine) {\n    super.deSerialize(ob, engine);\n    this.name = ob.name;\n    this.waitingTime = ob.waitingTime;\n    this.waitingUnit = ob.waitingUnit;\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      name: this.name,\n      waitingTime: this.waitingTime,\n      waitingUnit: this.waitingUnit\n    });\n  }\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport WaitIcon from '@material-ui/icons/AccessAlarmsOutlined';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { PortWidget } from './../../widgets/PortWidget';\nimport StatisticsTooltip from '../../StatisticTooltip';\nimport { setCanvasZoomingAndPanning } from '../../../actions';\n\nclass NodeWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodeFormWaitingTime: this.props.node.waitingTime,\n      nodeFormName: this.props.node.name,\n      timeUnit: this.props.node.waitingUnit,\n      dialogOpened: false,\n      anchorElementForTooltip: null\n    };\n  }\n\n  bem(selector) {\n    return (\n      this.props.classBaseName +\n      selector +\n      ' ' +\n      this.props.className +\n      selector +\n      ' '\n    );\n  }\n\n  getClassName() {\n    return this.props.classBaseName + ' ' + this.props.className;\n  }\n\n  openDialog = () => {\n    this.setState({\n      dialogOpened: true,\n      nodeFormWaitingTime: this.props.node.waitingTime,\n      nodeFormName: this.props.node.name,\n      timeUnit: this.props.node.waitingUnit,\n      anchorElementForTooltip: null\n    });\n    this.props.dispatch(setCanvasZoomingAndPanning(false));\n  };\n\n  closeDialog = () => {\n    this.setState({ dialogOpened: false });\n    this.props.dispatch(setCanvasZoomingAndPanning(true));\n  };\n\n  handleNodeMouseEnter = event => {\n    if (!this.state.dialogOpened) {\n      this.setState({ anchorElementForTooltip: event.currentTarget });\n    }\n  };\n\n  handleNodeMouseLeave = () => {\n    this.setState({ anchorElementForTooltip: null });\n  };\n\n  render() {\n    return (\n      <div\n        className={this.getClassName()}\n        style={{ background: this.props.node.color }}\n        onDoubleClick={() => {\n          this.openDialog();\n        }}\n        onMouseEnter={this.handleNodeMouseEnter}\n        onMouseLeave={this.handleNodeMouseLeave}\n      >\n        <div className='node-container'>\n          <div className={this.bem('__icon')}>\n            <WaitIcon />\n          </div>\n          <div className={this.bem('__ports')}>\n            <div className={this.bem('__left')}>\n              <PortWidget name='left' node={this.props.node} />\n            </div>\n            <div className={this.bem('__right')}>\n              <PortWidget name='right' node={this.props.node} />\n            </div>\n          </div>\n        </div>\n        <div className={this.bem('__title')}>\n          <div className={this.bem('__name')}>\n            {this.props.node.name\n              ? this.props.node.name\n              : `Wait - ${this.props.node.waitingTime} ${\n                  this.props.node.waitingUnit\n                }`}\n          </div>\n        </div>\n\n        <StatisticsTooltip\n          id={this.props.node.id}\n          anchorElement={this.state.anchorElementForTooltip}\n        />\n\n        <Dialog\n          open={this.state.dialogOpened}\n          onClose={this.closeDialog}\n          aria-labelledby='form-dialog-title'\n          onKeyUp={event => {\n            if (event.keyCode === 46 || event.keyCode === 8) {\n              event.preventDefault();\n              event.stopPropagation();\n              return false;\n            }\n          }}\n        >\n          <DialogTitle id='form-dialog-title'>Wait node</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Postpones the execution of next node in flow by selected amount of\n              time.\n            </DialogContentText>\n\n            <Grid container spacing={32}>\n              <Grid item xs={6}>\n                <TextField\n                  margin='normal'\n                  id='waiting-time'\n                  label='Node name'\n                  fullWidth\n                  value={this.state.nodeFormName}\n                  onChange={event => {\n                    this.setState({\n                      nodeFormName: event.target.value\n                    });\n                  }}\n                />\n              </Grid>\n            </Grid>\n\n            <Grid container spacing={32}>\n              <Grid item xs={6}>\n                <TextField\n                  id='waiting-time'\n                  label='Waiting time'\n                  type='number'\n                  fullWidth\n                  value={this.state.nodeFormWaitingTime}\n                  onChange={event => {\n                    this.setState({\n                      nodeFormWaitingTime: event.target.value\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <FormControl fullWidth>\n                  <InputLabel htmlFor='time-unit'>Time unit</InputLabel>\n                  <Select\n                    value={this.state.timeUnit}\n                    onChange={event => {\n                      this.setState({\n                        timeUnit: event.target.value\n                      });\n                    }}\n                    inputProps={{\n                      name: 'time-unit',\n                      id: 'time-unit'\n                    }}\n                  >\n                    <MenuItem value='minutes'>Minutes</MenuItem>\n                    <MenuItem value='hours'>Hours</MenuItem>\n                    <MenuItem value='days'>Days</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n          </DialogContent>\n\n          <DialogActions>\n            <Button\n              color='secondary'\n              onClick={() => {\n                this.closeDialog();\n              }}\n            >\n              Cancel\n            </Button>\n\n            <Button\n              color='primary'\n              onClick={() => {\n                // https://github.com/projectstorm/react-diagrams/issues/50 huh\n\n                this.props.node.waitingTime = this.state.nodeFormWaitingTime;\n                this.props.node.name = this.state.nodeFormName;\n                this.props.node.waitingUnit = this.state.timeUnit;\n\n                this.props.diagramEngine.repaintCanvas();\n                this.closeDialog();\n              }}\n            >\n              Save changes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { segments } = state;\n\n  return {\n    segments: segments.avalaibleSegments\n  };\n}\n\nexport default connect(mapStateToProps)(NodeWidget);\n","import { AbstractNodeFactory } from 'storm-react-diagrams';\n\nimport NodeWidget from './NodeWidget';\nimport { NodeModel } from './NodeModel';\nimport * as React from 'react';\n\nexport class NodeFactory extends AbstractNodeFactory {\n  constructor() {\n    super('wait');\n  }\n\n  generateReactWidget(diagramEngine, node) {\n    return (\n      <NodeWidget\n        diagramEngine={diagramEngine}\n        node={node}\n        classBaseName='round-node'\n        className='wait-node'\n      />\n    );\n  }\n\n  getNewInstance() {\n    return new NodeModel();\n  }\n}\n","import { LeftRightBottomPort } from '../Ports';\n\nexport class PortModel extends LeftRightBottomPort {\n  constructor(position = 'top') {\n    super(position, 'goal');\n  }\n}\n","import { NodeModel as BaseNodeModel } from 'storm-react-diagrams';\nimport * as _ from 'lodash';\nimport { PortModel } from './PortModel';\n\nexport class NodeModel extends BaseNodeModel {\n  constructor(element) {\n    super('goal', element.id);\n\n    this.name = element.name;\n    this.selectedGoals = element.selectedGoals;\n    this.timeoutTime = element.timeoutTime;\n    this.timeoutUnit = element.timeoutUnit;\n\n    this.recheckPeriodTime = element.recheckPeriodTime;\n    this.recheckPeriodUnit = element.recheckPeriodUnit;\n\n    this.addPort(new PortModel('left'));\n    this.addPort(new PortModel('bottom'));\n    this.addPort(new PortModel('right'));\n  }\n\n  deSerialize(ob, engine) {\n    super.deSerialize(ob, engine);\n    this.name = ob.name;\n    this.selectedGoals = ob.selectedGoals;\n    this.timeoutTime = ob.timeoutTime || '';\n    this.timeoutUnit = ob.timeoutUnit || 'days';\n\n    this.recheckPeriodTime = ob.recheckPeriodTime || '1';\n    this.recheckPeriodUnit = ob.recheckPeriodUnit || 'hours';\n  }\n\n  serialize() {\n    return _.merge(super.serialize(), {\n      name: this.name,\n      selectedGoals: this.selectedGoals,\n      timeoutTime: this.timeoutTime,\n      timeoutUnit: this.timeoutUnit,\n      recheckPeriodTime: this.recheckPeriodTime,\n      recheckPeriodUnit: this.recheckPeriodUnit,\n    });\n  }\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport OkIcon from '@material-ui/icons/Check';\nimport TimeoutIcon from '@material-ui/icons/AccessTime';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport GoalIcon from '@material-ui/icons/CheckBox';\n\nimport StatisticsTooltip from '../../StatisticTooltip';\nimport { PortWidget } from './../../widgets/PortWidget';\nimport MaterialSelect from '../../MaterialSelect';\nimport { setCanvasZoomingAndPanning } from '../../../actions';\n\nclass NodeWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nodeFormName: this.props.node.name,\n      selectedGoals: this.props.node.selectedGoals,\n      timeoutTime: this.props.node.timeoutTime,\n      timeoutUnit: this.props.node.timeoutUnit,\n      recheckPeriodTime: this.props.node.recheckPeriodTime,\n      recheckPeriodUnit: this.props.node.recheckPeriodUnit,\n      dialogOpened: false,\n      anchorElementForTooltip: null,      \n    };\n  }\n\n  bem(selector) {\n    return (\n      this.props.classBaseName +\n      selector +\n      ' ' +\n      this.props.className +\n      selector +\n      ' '\n    );\n  }\n\n  getClassName() {\n    return this.props.classBaseName + ' ' + this.props.className;\n  }\n\n  openDialog = () => {\n    this.setState({\n      dialogOpened: true,\n      nodeFormName: this.props.node.name,\n      selectedGoals: this.props.node.selectedGoals,\n      timeoutTime: this.props.node.timeoutTime,\n      timeoutUnit: this.props.node.timeoutUnit,\n      recheckPeriodTime: this.props.node.recheckPeriodTime,\n      recheckPeriodUnit: this.props.node.recheckPeriodUnit,\n      anchorElementForTooltip: null\n    });\n    this.props.dispatch(setCanvasZoomingAndPanning(false));\n  };\n\n  closeDialog = () => {\n    this.setState({ dialogOpened: false });\n    this.props.dispatch(setCanvasZoomingAndPanning(true));\n  };\n\n  transformOptionsForSelect = () => {\n    const goals = this.props.goals.map(goal => ({\n      value: goal.code,\n      label: goal.name,\n    }));\n    return goals;\n  };\n\n  handleNodeMouseEnter = event => {\n    if (!this.state.dialogOpened) {\n      this.setState({ anchorElementForTooltip: event.currentTarget });\n    }\n  };\n\n  handleNodeMouseLeave = () => {\n    this.setState({ anchorElementForTooltip: null });\n  };\n\n  getFormatedValue = () => {\n    let goals = {};\n    this.props.goals.forEach(goal => {\n      goals[goal.code] = goal;\n    });\n\n    let matches = [];\n\n    if (this.state.selectedGoals !== undefined) {\n      this.state.selectedGoals.forEach(goalCode => {\n        matches.push({\n          value: goalCode,\n          label: goals[goalCode].name \n        });\n      });\n    }\n\n    return matches;\n  };\n\n  render() {\n    return (\n      <div\n        className={this.getClassName()}\n        onDoubleClick={() => {\n          this.openDialog();\n        }}\n        onMouseEnter={this.handleNodeMouseEnter}\n        onMouseLeave={this.handleNodeMouseLeave}\n      >\n        <div className={this.bem('__title')}>\n          <div className={this.bem('__name')}>\n            {this.props.node.name ? this.props.node.name : 'Goal'}\n          </div>\n        </div>\n\n        <div className='node-container'>\n          <div className={this.bem('__icon')}>\n            <GoalIcon />\n          </div>\n\n          <div className={this.bem('__ports')}>\n            <div className={this.bem('__left')}>\n              <PortWidget name='left' node={this.props.node} />\n            </div>\n\n            <div className={this.bem('__right')}>\n              <PortWidget name='right' node={this.props.node}>\n                <OkIcon\n                  style={{\n                    position: 'absolute',\n                    top: '-20px',\n                    right: '-20px',\n                    color: '#2ECC40'\n                  }}\n                />\n              </PortWidget>\n            </div>\n\n            <div className={this.bem('__bottom')}>\n              <PortWidget name='bottom' node={this.props.node}>\n                <TimeoutIcon\n                  style={{\n                    position: 'absolute',\n                    top: '8px',\n                    right: '-22px',\n                    color: '#FF695E'\n                  }}\n                />\n              </PortWidget>\n            </div>\n          </div>\n        </div>\n\n        <StatisticsTooltip\n          id={this.props.node.id}\n          anchorElement={this.state.anchorElementForTooltip}\n        />\n\n        <Dialog\n          open={this.state.dialogOpened}\n          onClose={this.closeDialog}\n          aria-labelledby='form-dialog-title'\n          onKeyUp={event => {\n            if (event.keyCode === 46 || event.keyCode === 8) {\n              event.preventDefault();\n              event.stopPropagation();\n              return false;\n            }\n          }}\n          // fullScreen={this.state.creatingNewSegment}\n          // disableEscapeKeyDown={this.state.creatingNewSegment}\n        >            \n          <DialogTitle id='form-dialog-title'>Goal node</DialogTitle>\n\n          <DialogContent>\n            <DialogContentText>\n              Goal node evaluates whether user has completed selected onboarding goals. \n              Timeout value can be optionally specified, defining a point in time when evalution of completed goals is stopped.\n              Execution flow can be directed two ways from the node - a positive direction, when all goals are completed, or a negative one, when timeout threshold is reached.\n            </DialogContentText>\n\n            <Grid container spacing={32}>\n              <Grid item xs={6}>\n                <TextField\n                  margin='normal'\n                  id='goal-name'\n                  label='Node name'\n                  fullWidth\n                  value={this.state.nodeFormName}\n                  onChange={event => {\n                    this.setState({\n                      nodeFormName: event.target.value\n                    });\n                  }}\n                />\n              </Grid>\n            </Grid>\n\n            <Grid container spacing={32}>\n              <Grid item xs={12}>\n                <MaterialSelect\n                  options={this.transformOptionsForSelect()}\n                  value={this.getFormatedValue()}\n                  onChange={selectedGoals => {\n                    this.setState({\n                      selectedGoals: selectedGoals.map(item => item.value)\n                    });\n                  }}\n                  isMulti={true}\n                  placeholder='Pick goals'\n                  label='Selected Goal(s)'\n                />\n              </Grid>\n            </Grid>\n\n            <Grid container spacing={32}>\n              <Grid item xs={6}>\n                <TextField\n                  id='recheck-period-time'\n                  label='Recheck period time'\n                  type='number'\n                  helperText=\"How often goals completition should be checked\"\n                  fullWidth\n                  value={this.state.recheckPeriodTime}\n                  onChange={event => {\n                    this.setState({\n                      recheckPeriodTime: event.target.value\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <FormControl fullWidth>\n                  <InputLabel htmlFor='time-unit'>Time unit</InputLabel>\n                  <Select\n                    value={this.state.recheckPeriodUnit}\n                    onChange={event => {\n                      this.setState({\n                        recheckPeriodUnit: event.target.value\n                      });\n                    }}\n                    inputProps={{\n                      name: 'recheck-period-unit',\n                      id: 'recheck-period-unit'\n                    }}\n                  >\n                    <MenuItem value='minutes'>Minutes</MenuItem>\n                    <MenuItem value='hours'>Hours</MenuItem>\n                    <MenuItem value='days'>Days</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n            \n            <Grid container spacing={32}>\n              <Grid item xs={6}>\n                <TextField\n                  id='timeout-time'\n                  label='Timeout time'\n                  type='number'\n                  placeholder=\"No timeout\"\n                  helperText=\"Optionally select a timeout\"\n                  fullWidth\n                  value={this.state.timeoutTime}\n                  onChange={event => {\n                    this.setState({\n                      timeoutTime: event.target.value\n                    });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <FormControl fullWidth>\n                  <InputLabel htmlFor='time-unit'>Time unit</InputLabel>\n                  <Select\n                    value={this.state.timeoutUnit}\n                    onChange={event => {\n                      this.setState({\n                        timeoutUnit: event.target.value\n                      });\n                    }}\n                    inputProps={{\n                      name: 'time-unit',\n                      id: 'time-unit'\n                    }}\n                  >\n                    <MenuItem value='minutes'>Minutes</MenuItem>\n                    <MenuItem value='hours'>Hours</MenuItem>\n                    <MenuItem value='days'>Days</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n            </Grid>\n\n          </DialogContent>\n\n          <DialogActions>\n            <Button\n              color='secondary'\n              onClick={() => {\n                this.closeDialog();\n              }}\n            >\n              Cancel\n            </Button>\n\n            <Button\n              color='primary'\n              onClick={() => {\n                this.props.node.name = this.state.nodeFormName;\n                this.props.node.selectedGoals = this.state.selectedGoals;\n                this.props.node.timeoutTime = this.state.timeoutTime;\n                this.props.node.timeoutUnit = this.state.timeoutUnit;\n                this.props.node.recheckPeriodTime = this.state.recheckPeriodTime;\n                this.props.node.recheckPeriodUnit = this.state.recheckPeriodUnit;\n                this.props.diagramEngine.repaintCanvas();\n                this.closeDialog();\n              }}\n            >\n              Save changes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { goals, dispatch } = state;\n\n  return {\n    goals: goals.availableGoals,\n    dispatch\n  };\n}\n\nexport default connect(mapStateToProps)(NodeWidget);\n","import * as React from 'react';\nimport { AbstractNodeFactory } from 'storm-react-diagrams';\n\nimport NodeWidget from './NodeWidget';\nimport { NodeModel } from './NodeModel';\n\nexport class NodeFactory extends AbstractNodeFactory {\n  constructor() {\n    super('goal');\n  }\n\n  generateReactWidget(diagramEngine, node) {\n    return (\n      <NodeWidget\n        diagramEngine={diagramEngine}\n        node={node}\n        classBaseName='diamond-node'\n        className='goal-node'\n      />\n    );\n  }\n\n  getNewInstance() {\n    return new NodeModel();\n  }\n}\n","import * as React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport compose from 'recompose/compose';\nimport { DiagramWidget } from 'storm-react-diagrams';\nimport Button from '@material-ui/core/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport EmailIcon from '@material-ui/icons/Mail';\nimport BannerIcon from '@material-ui/icons/Adjust';\nimport TriggerIcon from '@material-ui/icons/Notifications';\nimport WaitIcon from '@material-ui/icons/AccessAlarmsOutlined';\nimport SegmentIcon from '@material-ui/icons/SubdirectoryArrowRight';\nimport GoalIcon from '@material-ui/icons/CheckBox';\n\nimport * as config from './../../config';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport { ExportService } from './../../services/ExportService';\nimport Notification from '../Notification';\nimport { Email, Segment, Trigger, Wait, Goal, Banner } from './../elements';\nimport {\n  setScenarioId,\n  setScenarioName,\n  setCanvasNotification,\n  setScenarioLoading\n} from '../../actions';\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex'\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    padding: 0\n  },\n  toolbar: theme.mixins.toolbar\n});\n\nclass BodyWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editingName: false,\n      editedName: ''\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (this.props.app.isCorruptedPayload() === true && prevProps.app.isCorruptedPayload() === false) {\n      this.props.dispatch(\n        setCanvasNotification({\n          open: true,\n          variant: 'error',\n          text: 'Unable to load corrupted scenario.'\n        })\n      );\n    }\n  }\n\n  saveChanges = () => {\n    const { dispatch } = this.props;\n\n    // Check for corruption to prevent override\n    if (this.props.app.isCorruptedPayload()) {\n      dispatch(\n        setCanvasNotification({\n          open: true,\n          variant: 'error',\n          text: 'Cannot modify corrupted scenario.'\n        })\n      );\n      return;\n    };\n\n    const exportService = new ExportService(\n      this.props.app.getDiagramEngine().getDiagramModel()\n    );\n\n    const payload = {\n      name: this.props.scenario.name,\n      ...exportService.exportPayload()\n    };\n\n    const scenarioId = this.props.scenario.id;\n    if (scenarioId) {\n      payload.id = scenarioId;\n    }\n\n    dispatch(setScenarioLoading(true));\n\n    axios\n      .post(`${config.URL_SCENARIO_CREATE}`, payload)\n      .then(response => {\n        dispatch(setScenarioId(response.data.id));\n        dispatch(setScenarioLoading(false));\n        dispatch(\n          setCanvasNotification({\n            open: true,\n            variant: 'success',\n            text: 'Scenario saving succeeded.'\n          })\n        );\n      })\n      .catch(error => {\n        dispatch(setScenarioLoading(false));\n        dispatch(\n          setCanvasNotification({\n            open: true,\n            variant: 'error',\n            text: 'Scenario saving failed.'\n          })\n        );\n        console.log(error);\n      });\n  };\n\n  startEditingName = () => {\n    this.setState({\n      editedName: this.props.scenario.name,\n      editingName: true\n    });\n  };\n\n  cancelEditingName = () => {\n    this.setState({\n      editedName: '',\n      editingName: false\n    });\n  };\n\n  submitEditingName = () => {\n    if (this.state.editedName.length === 0) {\n      this.cancelEditingName();\n      return;\n    }\n\n    this.props.dispatch(setScenarioName(this.state.editedName));\n    this.setState({\n      editedName: '',\n      editingName: false\n    });\n  };\n\n  handleCloseAndSaveDuringChangingName = event => {\n    if (event.keyCode === 27) {\n      this.cancelEditingName();\n    } else if (event.keyCode === 13) {\n      this.submitEditingName();\n    }\n  };\n\n  handleNameTyping = event => {\n    this.setState({\n      editedName: event.target.value\n    });\n  };\n\n  closeNotification = () => {\n    this.props.dispatch(setCanvasNotification({ open: false }));\n  };\n\n  render() {\n    const { classes, canvas } = this.props;\n\n    const diagramProps = {\n      className: 'srd-demo-canvas',\n      diagramEngine: this.props.app.getDiagramEngine(),\n      maxNumberPointsPerLink: 0,\n      allowLooseLinks: false,\n      allowCanvasTranslation: canvas.pannable,\n      allowCanvasZoom: canvas.zoomable\n    }; // as DiagramProps;\n\n    return (\n      <div className='body'>\n        <div className={classes.root}>\n          <CssBaseline />\n          <AppBar position='fixed' className={classes.appBar}>\n            <Toolbar>\n              <Grid container>\n                <Grid item xs={4}>\n                  <Typography variant='h6' color='inherit' noWrap>\n                    {this.state.editingName ? (\n                      <input\n                        autoFocus\n                        type='text'\n                        value={this.state.editedName}\n                        onChange={this.handleNameTyping}\n                        onKeyDown={this.handleCloseAndSaveDuringChangingName}\n                        onBlur={this.cancelEditingName}\n                        className='changing-name-input'\n                      />\n                    ) : (\n                      <span\n                        onClick={this.startEditingName}\n                        className='scenario-name'\n                      >\n                        {this.props.scenario.name}\n                      </span>\n                    )}\n                  </Typography>\n                </Grid>\n\n                <Grid item xs={8}>\n                  <Grid container direction='row' justify='flex-end'>\n                    {!!this.props.scenario.loading && (\n                      <CircularProgress\n                        className='circular-loading'\n                        size={19}\n                        color='inherit'\n                      />\n                    )}\n                    <Button\n                      size='small'\n                      variant='contained'\n                      color='secondary'\n                      onClick={() => this.saveChanges()}\n                    >\n                      {this.props.scenario.id ? 'Update' : 'Save'}\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Toolbar>\n          </AppBar>\n          <Drawer\n            className={classes.drawer}\n            variant='permanent'\n            classes={{\n              paper: classes.drawerPaper\n            }}\n          >\n            <div className={classes.toolbar} />\n            <List\n              component='nav'\n              subheader={\n                <ListSubheader component='div'>Triggers</ListSubheader>\n              }\n            >\n              <TrayItemWidget\n                model={{ type: 'trigger' }}\n                name='Event'\n                icon={<TriggerIcon />}\n              />\n            </List>\n\n            <List\n              component='nav'\n              subheader={<ListSubheader component='div'>Actions</ListSubheader>}\n            >\n              <TrayItemWidget\n                model={{ type: 'email' }}\n                name='Send email'\n                icon={<EmailIcon />}\n              />\n\n              {config.BANNER_ENABLED &&\n                <TrayItemWidget\n                  model={{ type: 'banner' }}\n                  name='Show banner'\n                  icon={<BannerIcon />}\n                />\n              }\n              \n            </List>\n\n            <List\n              component='nav'\n              subheader={\n                <ListSubheader component='div'>Operations</ListSubheader>\n              }\n            >\n              <TrayItemWidget\n                model={{ type: 'segment' }}\n                name='Segment'\n                icon={<SegmentIcon />}\n              />\n\n              <TrayItemWidget\n                model={{ type: 'wait' }}\n                name='Wait'\n                icon={<WaitIcon />}\n              />\n\n              <TrayItemWidget\n                model={{ type: 'goal' }}\n                name='Goal'\n                icon={<GoalIcon />}\n              />\n            </List>\n          </Drawer>\n          <Notification\n            variant={this.props.canvas.notification.variant}\n            text={this.props.canvas.notification.text}\n            open={this.props.canvas.notification.open}\n            handleClose={this.closeNotification}\n          />\n\n          <main className={classes.content}>\n            <div\n              className='diagram-layer'\n              onDrop={event => {\n                const stormDiagramNode = event.dataTransfer.getData(\n                  'storm-diagram-node'\n                );\n                if (!stormDiagramNode) return;\n                var data = JSON.parse(stormDiagramNode);\n                // var nodesCount = _.keys(\n                //   this.props.app\n                //     .getDiagramEngine()\n                //     .getDiagramModel()\n                //     .getNodes()\n                // ).length;\n\n                var node = null;\n                if (data.type === 'email') {\n                  node = new Email.NodeModel({});\n                } else if (data.type === 'banner') {\n                  node = new Banner.NodeModel({\n                    expiresInUnit: 'days',\n                    expiresInTime: 1,\n                  });\n                } else if (data.type === 'segment') {\n                  node = new Segment.NodeModel({});\n                } else if (data.type === 'trigger') {\n                  node = new Trigger.NodeModel({});\n                } else if (data.type === 'wait') {\n                  node = new Wait.NodeModel({});\n                } else if (data.type === 'goal') {\n                  node = new Goal.NodeModel({\n                    recheckPeriodUnit: 'hours',\n                    recheckPeriodTime: 1,\n                  });\n                }\n                var points = this.props.app\n                  .getDiagramEngine()\n                  .getRelativeMousePoint(event);\n                node.x = points.x;\n                node.y = points.y;\n                this.props.app\n                  .getDiagramEngine()\n                  .getDiagramModel()\n                  .addNode(node);\n                this.forceUpdate();\n              }}\n              onDragOver={event => {\n                event.preventDefault();\n              }}\n            >\n              <DiagramWidget {...diagramProps} />\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    canvas: state.canvas,\n    scenario: state.scenario\n  };\n}\n\nexport default compose(\n  withStyles(styles, { name: 'BodyWidget' }),\n  connect(\n    mapStateToProps,\n    null\n  )\n)(BodyWidget);\n","import flatMap from 'lodash/flatMap';\n\n// import the custom models\nimport { Banner, Email, Segment, Trigger, Wait, Goal } from './../components/elements';\nimport { BANNER_ENABLED } from './../config';\n\nfunction minutesToTimeUnit(minutes) {\n  if (minutes % 1440 === 0) {\n    return {\n      unit: 'days',\n      time: minutes / 1440 \n    };\n  } else if (minutes % 60 === 0) {\n    return {\n      unit: 'hours',\n      time: minutes / 60 \n    };\n  }\n  return {\n    unit: 'minutes',\n    time: minutes\n  };\n}\n\nexport class RenderService {\n  constructor(activeModel, payload = {}) {\n    this.activeModel = activeModel;\n    this.payload = payload;\n  }\n\n  renderPayload(payload) {\n    this.payload = payload;\n\n    flatMap(payload.triggers, trigger => {\n      const triggerVisual = payload.visual[trigger.id];\n      // trigger.type = \"trigger\";\n\n      return this.renderElements(trigger, triggerVisual);\n    });\n  }\n\n  renderElements(element, visual) {\n    let nodes = [];\n    let node = null;\n\n    if (element.type === 'event') {\n      element.selectedTrigger = element.event.code;\n      node = new Trigger.NodeModel(element);\n\n      nodes = element.elements.flatMap(elementId => {\n        const element = this.payload.elements[elementId];\n        const visual = this.payload.visual[element.id];\n\n        const nextNodes = this.renderElements(element, visual);\n        const link = node.getPort('right').link(nextNodes[0].getPort('left')); //FIXME/REFACTOR: nextNodes[0] is the last added node, it works, but it's messy\n\n        this.activeModel.addLink(link);\n\n        return nextNodes;\n      });\n    } else if (element.type === 'email') {\n      element.selectedMail = element.email.code;\n      node = new Email.NodeModel(element);\n\n      nodes = element.email.descendants.flatMap(descendantObj => {\n        const element = this.payload.elements[descendantObj.uuid];\n        const visual = this.payload.visual[element.id];\n\n        const nextNodes = this.renderElements(element, visual);\n        const link = node.getPort('right').link(nextNodes[0].getPort('left'));\n\n        this.activeModel.addLink(link);\n\n        return nextNodes;\n      });\n    } else if (element.type === 'banner') {\n\n      if (!BANNER_ENABLED) {\n        throw Error(\"BANNER_ENABLED configuration is false, but loaded scenario contains banner element.\");\n      }\n\n      const timeUnit = minutesToTimeUnit(element.banner.expiresInMinutes);\n      element.expiresInUnit = timeUnit.unit;\n      element.expiresInTime = timeUnit.time;\n\n      element.selectedBanner = element.banner.id;\n      node = new Banner.NodeModel(element);\n\n      nodes = element.banner.descendants.flatMap(descendantObj => {\n        const element = this.payload.elements[descendantObj.uuid];\n        const visual = this.payload.visual[element.id];\n\n        const nextNodes = this.renderElements(element, visual);\n        const link = node.getPort('right').link(nextNodes[0].getPort('left'));\n\n        this.activeModel.addLink(link);\n\n        return nextNodes;\n      });\n    } else if (element.type === 'segment') {\n      element.selectedSegment = element.segment.code;\n      node = new Segment.NodeModel(element);\n\n      nodes = element.segment.descendants.flatMap(descendantObj => {\n        const element = this.payload.elements[descendantObj.uuid];\n        const visual = this.payload.visual[element.id];\n        const nextNodes = this.renderElements(element, visual);\n\n        if (descendantObj.direction) {\n          if (descendantObj.direction === 'positive') {\n            const link = node.getPort('right').link(nextNodes[0].getPort('left'));\n            this.activeModel.addLink(link);\n          } else if (descendantObj.direction === 'negative') {\n            const link = node.getPort('bottom').link(nextNodes[0].getPort('left'));\n            this.activeModel.addLink(link);\n          }\n        }\n\n        return nextNodes;\n      });\n    } else if (element.type === 'wait') {\n      const timeUnit = minutesToTimeUnit(element.wait.minutes);\n      element.waitingUnit = timeUnit.unit;\n      element.waitingTime = timeUnit.time;\n\n      node = new Wait.NodeModel(element);\n\n      nodes = element.wait.descendants.flatMap(descendantObj => {\n        const element = this.payload.elements[descendantObj.uuid];\n        const visual = this.payload.visual[element.id];\n\n        const nextNodes = this.renderElements(element, visual);\n        const link = node.getPort('right').link(nextNodes[0].getPort('left'));\n        this.activeModel.addLink(link);\n\n        return nextNodes;\n      });\n    } else if (element.type === 'goal') {\n      if (element.goal.hasOwnProperty(\"timeoutMinutes\")) {\n        const timeUnit = minutesToTimeUnit(element.goal.timeoutMinutes);\n        element.timeoutUnit = timeUnit.unit;\n        element.timeoutTime = timeUnit.time;\n      }\n\n      const recheckPeriodTimeUnit = minutesToTimeUnit(element.goal.recheckPeriodMinutes);\n      element.recheckPeriodUnit = recheckPeriodTimeUnit.unit;\n      element.recheckPeriodTime = recheckPeriodTimeUnit.time;\n\n      element.selectedGoals = element.goal.codes;\n      node = new Goal.NodeModel(element);\n\n      nodes = element.goal.descendants.flatMap(descendantObj => {\n        const element = this.payload.elements[descendantObj.uuid];\n        const visual = this.payload.visual[element.id];\n        const nextNodes = this.renderElements(element, visual);\n\n        if (descendantObj.direction) {\n          if (descendantObj.direction === 'positive') {\n            const link = node.getPort('right').link(nextNodes[0].getPort('left'));\n            this.activeModel.addLink(link);\n          } else if (descendantObj.direction === 'negative') {\n            const link = node.getPort('bottom').link(nextNodes[0].getPort('left'));\n            this.activeModel.addLink(link);\n          }\n        }\n\n        return nextNodes;\n      });\n    }\n\n    this.activeModel.addNode(node);\n    node.setPosition(visual.x, visual.y);\n\n    return [node, ...nodes];\n  }\n}\n","import { DiagramEngine, DiagramModel } from 'storm-react-diagrams';\n\n// import the custom models\nimport { SimplePortFactory, Banner, Email, Segment, Trigger, Wait, Goal } from './elements';\n\nimport './sass/main.scss';\nimport { LinkFactory } from './elements/Link';\nimport { RenderService } from './../services/RenderService';\n\nexport class Application {\n  activeModel;\n  diagramEngine;\n\n  constructor(payload) {\n    this.diagramEngine = new DiagramEngine();\n    this.diagramEngine.installDefaultFactories();\n    this.activeModel = new DiagramModel();\n    this.renderService = new RenderService(this.activeModel);\n    this.payload = payload;\n    this.corruptedPayload = false;\n\n    if (payload) {\n      this.renderPayload();\n    } else {\n      this.registerCustomModels();\n    }\n  }\n\n  renderPayload() {\n    this.registerCustomModels();\n    try {\n      this.renderService.renderPayload(this.payload);\n    } catch(ex) {\n      // In case of rendering error, dump loaded model, log and flag as corrupted scenario\n      console.log(ex.message);\n      this.corruptedPayload = true;\n      this.activeModel = new DiagramModel();\n    }\n    \n    this.diagramEngine.setDiagramModel(this.activeModel);\n    this.diagramEngine.repaintCanvas();\n  }\n\n  registerCustomModels() {\n    this.diagramEngine.registerLinkFactory(new LinkFactory());\n    this.diagramEngine.registerPortFactory(\n      new SimplePortFactory('email', config => new Email.PortModel())\n    );\n    this.diagramEngine.registerNodeFactory(new Email.NodeFactory());\n\n    this.diagramEngine.registerPortFactory(\n      new SimplePortFactory('segment', config => new Segment.PortModel())\n    );\n    this.diagramEngine.registerNodeFactory(new Segment.NodeFactory());\n\n    this.diagramEngine.registerPortFactory(\n      new SimplePortFactory('trigger', config => new Trigger.PortModel())\n    );\n    this.diagramEngine.registerNodeFactory(new Trigger.NodeFactory());\n\n    this.diagramEngine.registerPortFactory(\n      new SimplePortFactory('wait', config => new Wait.PortModel())\n    );\n    this.diagramEngine.registerNodeFactory(new Wait.NodeFactory());\n\n    // Goal\n    this.diagramEngine.registerPortFactory(\n      new SimplePortFactory('goal', config => new Goal.PortModel())\n    );\n    this.diagramEngine.registerNodeFactory(new Goal.NodeFactory());\n\n    // Banner\n    this.diagramEngine.registerPortFactory(\n      new SimplePortFactory('banner', config => new Banner.PortModel())\n    );\n    this.diagramEngine.registerNodeFactory(new Banner.NodeFactory());\n  }\n\n  getActiveDiagram() {\n    return this.activeModel;\n  }\n\n  getDiagramEngine() {\n    return this.diagramEngine;\n  }\n\n  isCorruptedPayload() {\n    return this.corruptedPayload;\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport SegmenterService from './services/SegmenterService';\nimport BodyWidget from './components/widgets/BodyWidget';\nimport { Application } from './components/Application';\nimport * as config from './config';\nimport {\n  fetchSegments,\n  fetchGoals,\n  fetchBanners,\n  fetchTriggers,\n  fetchScenario,\n  setScenarioName,\n  fetchMails\n} from './actions';\n\nclass App extends Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n\n    dispatch(fetchSegments());\n    dispatch(fetchGoals());\n    dispatch(fetchTriggers());\n    dispatch(fetchMails());\n\n    if (config.BANNER_ENABLED) {\n      dispatch(fetchBanners());\n    }\n\n    if (config.SCENARIO_ID) {\n      dispatch(fetchScenario(config.SCENARIO_ID));\n    } else {\n      dispatch(setScenarioName('Unnamed scenario'));\n    }\n\n    SegmenterService.load();\n  }\n\n  render() {\n    var app = new Application(this.props.scenarioPayload);\n\n    return <BodyWidget app={app} />;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    scenarioPayload: state.scenario.payload\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport axios from 'axios';\n\nimport rootReducer from './reducers';\nimport App from './App';\nimport * as config from './config';\n\nwindow.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = true;\naxios.defaults.headers.common['Authorization'] = config.AUTH_TOKEN;\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  {},\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}